/*! release#17.55.1.3 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("bundle.tracking", [], factory);
	else if(typeof exports === 'object')
		exports["bundle.tracking"] = factory();
	else
		root["bundle.tracking"] = factory();
})(this, function() {
return webpackJsonpbundle__name_([2],{

/***/ 13:
/*!************************************************!*\
  !*** ./js/app/tracking/tracking-dispatcher.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* jshint maxparams: 7 */
/* jshint maxlen: 140 */
/* global Promise, s */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! jquery */ 1),
	__webpack_require__(/*! tracking/omniture-api */ 59),
	__webpack_require__(/*! core/logging */ 16),
	__webpack_require__(/*! tracking/tracking-utils */ 14)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, OMNITURE_API, LOGGING, TRACKING_UTILS) {
    'use strict';
    //Private Methods
    var __ = {},
        //Public API
        exports = {
            __: __
        };
    __.debugMode = false;
    /**
     * list of all tracking submodules
     * (e.g. form-tracker, teaser-tracker)
     */
    __.trackingModules = [];
    //max time for fetching all the submodulesÂ´data
    //set to 21s, since some modules have a timeout of 20s
    __.maxFetchTime = 21000;
    // LOGGER
    __.LOGGER = LOGGING.createLogger('tracking');
    /**
     * register tracker (tracking submodule)
     */
    exports.registerTracker = function(trackingModule_) {
        //only register modules which have getData implemented
        if (typeof trackingModule_.getDataPromise === "function") {
            __.trackingModules.push(trackingModule_);
            __.LOGGER.debug('dispatcher.registerTracker: module registered:', trackingModule_);
        } else {
            __.LOGGER.error('dispatcher.registerTracker: module provided does not have a getDataPromise method.');
        }
    };
    /**
     * collect all relevant data from all submodules (asynchronously!!)
     * @returns {Promise} - promise
     */
    __.fetchSubmoduleData = function(element_) {
        var submoduleCount = __.trackingModules.length,
            queuedItems = submoduleCount,
            subModulePromise, delayTime = 200,
            dataCollectedArray = [],
            intervalID, elapsed = 0;
        if (!submoduleCount) {
            //no data to collect
            return Promise.reject(new Error("no regstered Trackers - no Data to fetch!"));
        }
        //start promise for the entire process of data collection
        return new Promise(function(resolve, reject) {
            //fetch tracking Data from subModules
            while (submoduleCount--) {
                subModulePromise = __.trackingModules[submoduleCount].getDataPromise(element_);
                subModulePromise.then(function(data) {//eslint-disable-line no-loop-func
                    dataCollectedArray.push(data);
                    queuedItems--;
                }, function(error) {//eslint-disable-line no-loop-func
                    __.LOGGER.warning("Error fetching Data " + error.message);
                    queuedItems--;
                });
            }
            //check if queue is finished or maxFetchTime is over
            intervalID = setInterval(function() {
                if (elapsed > __.maxFetchTime) {
                    clearInterval(intervalID);
                    //timeout but some of the modules data has allready been collected
                    if (dataCollectedArray.length) {
                        __.LOGGER.warning("fetching Data aborted due to timeout!");
                        resolve(dataCollectedArray);
                    } else {
                        //no data has been collected before aborting
                        reject(new Error("fetching Data aborted due to timeout!"));
                    }
                }
                //data fetching successfully finished
                if (queuedItems < 1) {
                    clearInterval(intervalID);
                    resolve(dataCollectedArray);
                }
                elapsed += delayTime;
            }, delayTime);
        });
    };
    /**
     * merge the data collected (asynch) from the submodules
     * with the pageData
     * @param {object} pageData_ - base page tracking data
     * @param {array} fetchedDataArray_ - array of all the submodule data
     * @returns {object} - merged tracking data
     */
    __.mergeFetchedData = function(pageData_, fetchedDataArray_) {
        var mergedData = {},
            len = 0;
        fetchedDataArray_ = fetchedDataArray_ || [];
        if (!fetchedDataArray_.length) {
            return pageData_;
        }
        len = fetchedDataArray_.length;
        var events = pageData_.events || [];
        jQuery.extend(mergedData, pageData_);
        var ev,len2;
        while (len--) {
            if (!!fetchedDataArray_[len].events) {
                //events is a String?
                if (typeof fetchedDataArray_[len].events === "string") {
                    events.push(fetchedDataArray_[len].events);
                } else {
                    //events is an Array?
                    if (typeof fetchedDataArray_[len].events === "object" && !!fetchedDataArray_[len].events.length) {
                        len2 = fetchedDataArray_[len].events.length;
                        while (len2--) {
                            ev = fetchedDataArray_[len].events[len2];
                            if (events.indexOf(ev) < 0) {
                                events.push(ev);
                            }
                        }
                    }
                }
            }
            jQuery.extend(mergedData, fetchedDataArray_[len]);
        }
        if(events.length){
        	mergedData.events = events;
        }
        return mergedData;
    };
    /**
     * track Data without page or layer changes (s.t())
     */
    exports.track = function(data_) {
        __.LOGGER.debug('dispatcher.track: ', data_);
        data_ = jQuery.extend(data_, TRACKING_UTILS.getGlobalObject());
        OMNITURE_API.track(data_);
    };
    /**
     * direct tracking for links (s.tl())
     * @param {object} data_ - tracking data
     */
    exports.trackNow = function(data_, name) {
        __.LOGGER.debug('dispatcher.trackNow: ', data_);
        data_ = jQuery.extend(data_, TRACKING_UTILS.getGlobalObject());
        OMNITURE_API.trackNow(data_, name);
    };
    /**
     * tracking of page and layer changes
     * @param {object} data_ - tracking data object
     * @param {object} emelent_ - DOMelement where the change happened
     */
    exports.trackPage = function(data_, element_) {
        var pageData = data_;
        var fetchedData;
        var promise = __.fetchSubmoduleData(element_);
        __.LOGGER.debug('dispatcher.trackPage: ', data_, element_);
        promise.then(function(data) {
            fetchedData = data;
        }, function(error) {
            __.LOGGER.log(error.message);
        }).then(function() {
            var mergedData = __.mergeFetchedData(pageData, fetchedData);
            OMNITURE_API.track(mergedData);
        }, function(error) {
            __.LOGGER.error(error);
        });
    };
    //====== MEDIA Tracking
    /**
     * track Video start
     */
    exports.mediaOpen = function(mediaName, mediaLength) {
        OMNITURE_API.mediaOpen(mediaName, mediaLength);
    };
    /**
     * track Video play
     */
    exports.mediaPlay = function(mediaName, mediaOffset, segmentNum, segment, segmentLength) {//eslint-disable-line max-params
        OMNITURE_API.mediaPlay(mediaName, mediaOffset, segmentNum, segment, segmentLength);
    };
    /**
     * track Video end
     */
    exports.mediaStop = function(mediaName, mediaOffset, skip) {
        OMNITURE_API.mediaStop(mediaName, mediaOffset, skip);
    };
    /**
     * track Video close
     */
    exports.mediaClose = function(mediaName) {
        OMNITURE_API.mediaClose(mediaName);
    };
    return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 14:
/*!*******************************************!*\
  !*** ./js/app/tracking/tracking-utils.js ***!
  \*******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* jshint maxlen: 131 */
/*global SETUPS*/

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! tracking/omniture-constants */ 29),
	__webpack_require__(/*! configurator/dpu-api */ 3),
	__webpack_require__(/*! router */ 8),
	__webpack_require__(/*! core/logging */ 16),
	__webpack_require__(/*! jquery */ 1)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(OMNITURE_CONSTANTS, DPU_API, ROUTER, LOGGING, jQuery) {//eslint-disable-line max-params

	"use strict";

	var
	// internals
	__ = {},

		// api
		exports = {
			__: __
		};
	__.LOGGER = LOGGING.createLogger('tracking');

	var trackingObject = false;

	/**
	 * @returns {array} triggers - conflict triggers
	 */
	exports.getConflictTriggers = function() {
		return DPU_API.getConflictTriggers();
	};
	/**
	 * @returns {object} conflict - conflict object
	 */

	exports.getConflicts = function() {
		return DPU_API.getConflicts();
	};

	/**
	 * parses url and returns layer, page or initial-page-url without /content/ and .html
	 * @returns {string} url
	 */
	exports.getUrl = function() {
		var url = '';
		var urlHash = window.location.hash.replace(/#/, '');
		var jsLayerString;

		if ( urlHash.length !== 0 ) {
			urlHash = urlHash.split('&');
			jQuery.each(urlHash, function(index, value) {
				if (value.indexOf('jslayer=')===-1 && (value.indexOf('layer=')!==-1 || value.indexOf('modal=')!==-1 || index===0)) {
					url = value;
				}
				if (value.indexOf('jslayer=')!==-1) {
					jsLayerString = value;
				}
			});
			// remove XYZ= from the string (layer=, page=, modal=, ...)
			url = url.replace(/[a-zA-Z0-9]*=/, '');
		}

		// remove leading /content from the url as well as the first three paths (/de/brand/de/)
		if (url === '') {
			url = window.location.pathname.replace(/^\/content/, '').replace(/\.html$/, '');
		} else {
			url = url.replace(/^\/content/, '').replace(/\.html$/, '');
		}

		// remove jslayer= from the string
		if (jsLayerString) {
			url += jsLayerString.replace(/[a-zA-Z0-9]*=/, '/');
		}

		return url;
	};

	exports.getGlobalObject = function () {
		var url = window.location.pathname;

		if (trackingObject === false) {
			url = url.replace(/^\//, '').replace(/\.html$/, '');
			trackingObject = {};
			// language
			if (url.split('/')[0] === 'content') {
				trackingObject.prop2 = url.split('/')[3];
				trackingObject.prop3 = url.split('/')[1];
			} else {
				trackingObject.prop2 = url.split('/')[2];
				trackingObject.prop3 = url.split('/')[0];
			}

			trackingObject.eVar41 = 'script';
			trackingObject.prop59 = exports.getAppName();
			trackingObject.eVar48 = trackingObject.prop59;
		}

		return trackingObject;
	};


	/**
	 * @returns {string} applicationName - application name (e.g. 'NeMo')
	 */
	exports.getAppName = function() {

		if( DPU_API.isConfigurable() ) {

			if (!!window.mss) {
				return 'mssc';
			}

			// Application is "NeMo" for nemo-pages
			return 'NeMo';

		} else {

			// Application is "CMS" for non-nemo-pages
			return 'CMS';

		}

	};
	/**
	 * @returns {string} pageName - pagename (e.g. 'neuwagen/a6/a6_limousine/ausstattungslinie')
	 */
	exports.getPageName = function() {
		return exports.getUrl().replace(/^\//, '').replace(/([\w-]*\/){3}/, '');
	};
	/**
	 * check if Item is located in an conflict layer context
	 * @returns {boolean}
	 */
	exports.isConflictAlternative = function($triggerElement) {
		/*jslint maxlen: 170 */
		return ($triggerElement && $triggerElement.length && typeof $triggerElement.closest === 'function' && $triggerElement.closest(".nm-layer-conflict").length > 0);
	};

	/**
	* get itemÂ´s category (interior,exterior,equipment,upholstery,â¦)
	*/
	exports.getItemsCategory=function(item_){
		var itemFamily=null;
		if(!!item_ &&!!item_.family){
			itemFamily  = DPU_API.getFamilies()[item_.family]||null;
		}
		return itemFamily;
	};
	/**
	 * generates item properties category|subcategory|item-name as array
	 * @returns {array}
	 */
	exports.generateConfigStartItemPropertiesArr = function(item_) {
		var itemProp = [];
		if (item_ && !!item_.family) {
			var familyProps = DPU_API.getFamilies()[item_.family];
			//item category
			if (!!familyProps && !!familyProps.group) {
				itemProp.push(familyProps.group.replace(/,|;/g ," "));
			}
			//item subcategory
			if (!!familyProps && !!familyProps.name) {
				itemProp.push(familyProps.name.replace(/,|;/g ," "));
			}
			//item name
			if (!!item_.name) {
				itemProp.push(item_.name.replace(/,|;/g ," "));
			}
		}
		return itemProp;
	};
	/**
	* proxy tracking method call to avoid breaking the event handling
	* chain if an error/exeption occurs within the tracking code
	* @param {function} fn -funtion to be call
	* @param {object} context - functionÂ´s scope
	*/
	exports.proxyMethod = function (fn, context, data) {
    return function () {
        try {
        	var args = new Array(arguments.length);
			    for(var i = 0; i < args.length; ++i) {
			        args[i] = arguments[i];
			    }
        	if (!!data) { args.push(data); }
            fn.apply(context, args);
        } catch (error) {
			console.error(error);
        }
    };
};

	/**
	 * Logger
	 */
	exports.log = function(obj) {
		__.LOGGER.debug(obj);
	};

	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 16:
/*!********************************!*\
  !*** ./js/app/core/logging.js ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	'use strict';

	var exports, __;
	__ = {};
	exports = {
		__: __
	};

	// Loggers that are active by default.
	__.defaultLoggers = [];
	// logLevel for loggers that are active by default.
	__.defaultLoggersLevel = 4;


	// localStorage item name.
	__.localStorageKey = 'v7_logging';

	// All loggers by name.
	__.loggers = {};

	// The logging functions. Attached/removed to/from all
	// loggers if logging is activated/deactivated.
	// `this` is assumed to be a logger instance.
	__.debug = function() {
		if(this.level === 1) {
			this._log.apply(this, arguments);
		}
	};
	__.info = function() {
		if(this.level === 2) {
			this._log.apply(this, arguments);
		}
	};
	__.warning = function() {
		if(this.level <= 3) {
			this._log.apply(this, arguments);
		}
	};
	__.error = function() {
		this._log.apply(this, arguments);
	};
	__.noop = function() {};

	/*
	 * Logger constructor
	 */
	__.Logger = function(name) {
		this.name = name;
		this.level = exports.logLevels.ERROR;
		return this;
	};
	__.Logger.prototype.debug = __.noop;
	__.Logger.prototype.info = __.noop;
	__.Logger.prototype.warning = __.noop;
	__.Logger.prototype.error = __.noop;
	__.Logger.prototype._log = function() {
		var args, i;
		args = [];
		if(!!window.console) {
			try {
				for(i=arguments.length-1; i>=0; i--) {
					args.unshift(arguments[i]);
				}
				args.unshift('[' + this.name + ']');
				console.log.apply(console, args);
			}
			catch(e) {
				console.warn(e);
			}
		}
	};

	/*
	 * Initializes the module.
	 * Checks if some loggers are activated in localStorage.
	 */
	__.initialize = function() {
		var config, logger, i;
		try {
			if(!!localStorage && !!localStorage[__.localStorageKey]) {
				config = JSON.parse(localStorage[__.localStorageKey]);
				if(!!config.loggers) {
					__.defaultLoggers = config.loggers;
				}
				if(!!config.logLevel) {
					__.defaultLoggersLevel = config.logLevel;
				}
			}
		}
		catch(e) {
			console.warn(e);
		}
	};

	/*
	 * Log levels:
	 *   - DEBUG: 1
	 *   - WARNING: 2
	 *   - ERROR: 3
	 */
	exports.logLevels = {
		DEBUG: 1,
		INFO: 2,
		WARNING: 3,
		ERROR: 4
	};

	/**
	 * Creates a new logger instance and stores it in module state.
	 */
	exports.createLogger = function(name) {
		var i;
		if(!__.loggers[name]) {
			__.loggers[name] = new __.Logger(name);
		}
		// Check if this logger should be activated by default.
		for(i=__.defaultLoggers.length-1; i>=0; i--) {
			if(__.defaultLoggers[i] === name) {
				exports.activate(name);
				__.loggers[name].level = __.defaultLoggersLevel;
				break;
			}
		}
		return __.loggers[name];
	};

	exports.activate = function(loggerName) {
		var logger = __.loggers[loggerName];
		if(!!logger) {
			logger.debug = __.debug;
			logger.info = __.info;
			logger.warning = __.warning;
			logger.error = __.error;
		}
		else {
			__.defaultLoggers.push(loggerName);
		}
	};

	exports.deactivate = function(loggerName) {
		var logger;
		for(logger in __.loggers) {
			__.loggers[logger].debug = __.noop;
			__.loggers[logger].info = __.noop;
			__.loggers[logger].warning = __.noop;
			__.loggers[logger].error = __.noop;
		}
	};

	exports.persist = function(loggerNames, logLevel) {
		var config;
		try {
			config = {
				loggers: loggerNames
			};
			if(!!logLevel) {
				config.logLevel = logLevel;
			}
			localStorage[__.localStorageKey] = JSON.stringify(config);
		}
		catch(e) {
			console.warn(e);
		}
	};
	exports.unpersist = function() {
		try {
			localStorage[__.localStorageKey] = '';
		}
		catch(e) {
			console.warn(e);
		}
	};

	__.initialize();

	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 17:
/*!*********************************!*\
  !*** ./js/app/utils/polling.js ***!
  \*********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	"use strict";
	var exports, __;
	__ = {};
	exports = {
		__: __
	};
	// Run all 50 ms.
	__.defaultIntervalTime = 50;

	/*
	 * The actual polling method.
	 */
	__.run = function(fn, timeout, intervalTime, resolve, reject) {//eslint-disable-line max-params
		var interval, runsFor, returnValue;
		runsFor = 0;
		returnValue = fn();
		if(!!returnValue) {
			resolve(returnValue);
		}
		else {
			interval = setInterval(function() {
				returnValue = fn();
				if(!!returnValue) {
					clearInterval(interval);
					resolve(returnValue);
				}
				else if(runsFor > timeout) {
					clearInterval(interval);
					reject(new Error());
				}
				runsFor += intervalTime;
			}, intervalTime);
		}
	};

	/**
	 * Starts polling.
	 * @param {Function} fn - A function that gets called until it returns a truthy value.
	 * @param {Number} timeout - The timeout. Rejects the promise if elapsed.
	 * @param {Number} intervalTime_ - The duration (ms) between each call
	 * (default 50).
	 * @returns {Promise} A Promise that either:
	 *	- resolves with the return value of fn
	 *	- or rejects with an Error object.
	 */
	exports.wait = function(fn, timeout, intervalTime_) {
		// If no intervalTime is set, use the default.
		var intervalTime=intervalTime_||__.defaultIntervalTime;
		// Return a new Promise and start polling.
		return new Promise(function(resolve, reject) {
			__.run(fn, timeout, intervalTime, resolve, reject);
		});
	};

	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 20:
/*!***************************************************!*\
  !*** ./js/app/tracking/renderinglayer-tracker.js ***!
  \***************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! jquery */ 1),
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! tracking/tracking-dispatcher */ 13),
	__webpack_require__(/*! tracking/tracking-utils */ 14)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, EVENTS, TRACKING_DISPATCHER, TRACKING_UTILS) {//eslint-disable-line max-params
	'use strict';
	var	__ = {},
		exports = {
			'__': __
		};

	__.renderingLayerType = 'Rendering Layer 2D';

	__.oDefaults = {
		'sSelectorThumbnail': '.nm-rl-placeholder',
		'sSelectorArcNavi': '.nm-renderinglayer-stagebrowse li',
		'sSelectorColorOption': '.nm-renderinglayer #nm-renderinglayer-extcolor-selection-color li a',
		'sSelectorAnimationOption': '.nm-renderinglayer .nm-ave-animation-selection .animation-option',
		'sSelectorAnimationOptionInline': '.nm-md-inline-rendering .nm-ave-animation-selection .animation-option',
		'sSelectorRenderingLayer': '.nm-layer-renderinglayer',
		'sSelectorRenderingLayerCloseButton': '.nm-layer-renderinglayer .nm-layer-toolbar .nm-button-close',
		'sSelectorBasketImage': '.nm-basket-image'
	};

	__.addEvents = function() {
		__.eventBus.on(EVENTS.AVE_STREAM_READY, __.enable3dTrackingMode);
		__.legacyEventBus.on(
			"click.renderinglayerThumbnail",
			__.oDefaults.sSelectorThumbnail,
			TRACKING_UTILS.proxyMethod(__.thumbnailClickedHandler, __)
		);
		__.legacyEventBus.on(
			"click.renderinglayerArcNavi",
			__.oDefaults.sSelectorArcNavi,
			TRACKING_UTILS.proxyMethod(__.arcNaviClickedHandler, __)
		);
		__.legacyEventBus.on(
			"click.renderinglayerColorOption",
			__.oDefaults.sSelectorColorOption,
			TRACKING_UTILS.proxyMethod(__.colorOptionClickedHandler, __)
		);
		__.legacyEventBus.on(
			"click.renderinglayerAnimationOption",
			__.oDefaults.sSelectorAnimationOption,
			TRACKING_UTILS.proxyMethod(__.animationOptionClickedHandler, __)
		);
		__.legacyEventBus.on(
			"click.renderinglayerAnimationOption",
			__.oDefaults.sSelectorAnimationOptionInline,
			TRACKING_UTILS.proxyMethod(__.animationOptionInlineClickedHandler, __)
		);
		__.legacyEventBus.on(
			"click.renderinglayerCloseButton",
			__.oDefaults.sSelectorRenderingLayerCloseButton,
			TRACKING_UTILS.proxyMethod(__.closeButtonClickedHandler, __)
		);
		__.legacyEventBus.on(
			"click.basketImage",
			__.oDefaults.sSelectorBasketImage,
			TRACKING_UTILS.proxyMethod(__.basketImageClickedHandler, __)
		);
		//__.eventBus.on(EVENTS.RENDERINGLAYER_LOADED, __.handlerLayerLoaded);

	};
	__.initialize = function() {
		__.addEvents();
	};

	__.getCurrentPageName = function() {
		var calculatedPagename = jQuery("body").attr("page-name");

		if (calculatedPagename === '') {

			if (window.location.href.indexOf('page=') > -1) {
				calculatedPagename = window.location.href.substr(window.location.href.indexOf('page=') + 5).split('/');
			} else {
				calculatedPagename = window.location.pathname.split('/');
			}
			calculatedPagename.splice(0, 4);
			calculatedPagename = calculatedPagename.join('/');
			calculatedPagename = calculatedPagename.substr(0, calculatedPagename.indexOf('.')) + '/' + jQuery("body").attr("page-name");
		}
		return calculatedPagename;
	};

	__.thumbnailClickedHandler = function(event) {

		var thumbElem = jQuery(event.currentTarget);
		var viewType = thumbElem.attr("data-key");

		__.genericRenderinglayerHandler(__.renderingLayerType + ":Thumbnail Click:" + viewType, false);
	};

	__.arcNaviClickedHandler = function() {
		exports.swipeHandler('Arrow');
	};

	exports.swipeHandler = function(swipeType) {
		__.genericRenderinglayerHandler(__.renderingLayerType + ":Swipe:" + swipeType, false);
	};

	exports.swipeInlineHandler = function(swipeType) {
		__.genericRenderinglayerHandler("Inline Rendering 3D:Swipe:" + swipeType, true);
	};

	__.colorOptionClickedHandler = function(event) {
		var colorItem = jQuery(event.currentTarget);
		__.genericRenderinglayerHandler(__.renderingLayerType + ":Switch:" + colorItem.text(), false);
	};

	__.animationOptionClickedHandler = function(event) {
		var animationItem = jQuery(event.currentTarget);
		var animationKey = animationItem.attr("data-animation");
		var environmentKey = animationItem.attr("data-environment");
		if (animationKey) {
			__.genericRenderinglayerHandler(__.renderingLayerType + ":Switch:" + animationKey, false);
		} else {
			__.genericRenderinglayerHandler(__.renderingLayerType + ":Switch:" + environmentKey, false);
		}
	};

	__.animationOptionInlineClickedHandler = function(event) {
		var animationItem = jQuery(event.currentTarget);
		var animationKey = animationItem.attr("data-animation");
		var environmentKey = animationItem.attr("data-environment");
		if (animationKey) {
			__.genericRenderinglayerHandler("Inline Rendering 3D:Switch:" + animationKey, true);
		} else {
			__.genericRenderinglayerHandler("Inline Rendering 3D:Switch:" + environmentKey, true);
		}
	};

	__.closeButtonClickedHandler = function() {
		__.genericRenderinglayerHandler(__.renderingLayerType + ":Close Layer", false);
	};

	__.basketImageClickedHandler = function() {
		__.genericRenderinglayerHandler("Nemo Cart:Rendering Layer Link:Cart Rendering Layer Link", false);
	};

	__.genericRenderinglayerHandler = function(customPart, isInlineRendering) {
		var pagename = __.getCurrentPageName();
		var linkProperties = {};
		linkProperties.eVar37 = pagename;
		linkProperties.prop57 = linkProperties.eVar37;
		linkProperties.eVar39 = customPart;
		linkProperties.prop39 = linkProperties.eVar39;
		linkProperties.eVar46 = pagename + ":" + customPart;
		linkProperties.prop46 = linkProperties.eVar46;

		if (isInlineRendering) {
			linkProperties.eVar71 = "configuration_inline_rendering";
		} else {
			linkProperties.eVar71 = "configuration_rendering_layer";
		}
		TRACKING_DISPATCHER.trackNow(linkProperties, 'renderinglayer');
	};

	__.genericRenderinglayerPageHandler = function(customPart, isInlineRendering) {
		var pagename = __.getCurrentPageName();
		var linkProperties = {};
		linkProperties.eVar37 = pagename;
		linkProperties.prop57 = linkProperties.eVar37;
		linkProperties.eVar39 = customPart;
		linkProperties.prop39 = linkProperties.eVar39;
		linkProperties.eVar46 = pagename + ":" + customPart;
		linkProperties.prop46 = linkProperties.eVar46;

		if (isInlineRendering) {
			linkProperties.eVar71 = "configuration_inline_rendering";
		} else {
			linkProperties.eVar71 = "configuration_rendering_layer";
		}

		TRACKING_DISPATCHER.track(linkProperties);
	};

	__.trackLayerLoaded = function() {
		var pagename = __.getCurrentPageName();
		var linkProperties = {};

		linkProperties.prop1 = pagename;
		linkProperties.eVar37 = pagename;
		linkProperties.prop57 = linkProperties.eVar37;
		linkProperties.eVar71 = "configuration_rendering_layer";
		linkProperties.prop68 = linkProperties.eVar71;

		linkProperties = jQuery.extend(linkProperties, TRACKING_UTILS.getGlobalObject());

		linkProperties.eVar24 = linkProperties.prop59 + ":" + linkProperties.prop2;
		TRACKING_DISPATCHER.track(linkProperties);
	};

	__.handlerLayerLoaded = function() {
		var renderingLayer = jQuery(__.oDefaults.sSelectorRenderingLayer);
		if (renderingLayer.length > 0) {
			__.trackLayerLoaded();
		}
	};

	__.enable3dTrackingMode = function() {
		var isInLayer = jQuery('#streamWrapper').closest('.nm-renderinglayer').length > 0;
		console.log("INLAYER: ", isInLayer);
		__.renderingLayerType = 'Rendering Layer 3D';
		if (isInLayer) {
			__.genericRenderinglayerPageHandler(__.renderingLayerType + ":Layer Loaded", false);
		} else {
			__.genericRenderinglayerPageHandler(__.renderingLayerType + ":Layer Loaded", true);
		}
	};

	/**
	 * public initialize method
	 * @param {EventBus} globalEventBus - tbd
	 * @return {Promise} returns Promise
	 */
	exports.initializePromise = function(globalEventBus) {

		return new Promise(function(resolve) {
			__.eventBus = globalEventBus;
			__.legacyEventBus = jQuery('body');
			__.initialize();
			resolve('renderinglayer-tracker.js');
		});
	};

	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 21:
/*!*****************************************!*\
  !*** ./js/app/tracking/apis/dtm-api.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	'use strict';
	var __ = {},
		exports = {
			__: __
		};
	__.oDefaults = {
		'registeredDataLayerObjects': ['page', 'product', 'cart', 'user'],
		'registeredAnalyticsObjects': ['event', 'page', 'product', 'cart']
	};
	/**
	 * get webAnalytics container or create new one
	 * @return {Array} web analytics container
	 */
	__.getWebAnalyticsContainer = function() {
		if (typeof window.webAnalytics === 'undefined') {
			window.webAnalytics = [];
		}
		return window.webAnalytics;
	};
	/**
	 * init data layer object
	 * @return {void}
	 */
	exports.initDataObject = function() {
		window.digitalData = {};
		__.initialTrackingDone = true;
	};
	/**
	 * wrapper for data object access
	 * @return {Object} the window.digitalData object
	 */
	__.getDataObject = function() {
		return window.digitalData;
	};
	/**
	 * check, whether anything has already been written into window.digitalData
	 * @return {boolean} true in case there is already data, false else
	 */
	exports.isInitialTrackingDone = function() {

		if (!!__.initialTrackingDone) {
			return __.initialTrackingDone;
		}
		return false;
	};
	/**
	 * store registered objects from combined object in data layer
	 * @param {Object} combinedObject - combined tracking object
	 * @return {void}
	 */
	__.storeRegisteredInDataObject = function(combinedObject) {
		var i, len, currentObjectKey;

		for (i = 0, len = __.oDefaults.registeredDataLayerObjects.length; i < len; i++) {
			currentObjectKey = __.oDefaults.registeredDataLayerObjects[i];

			if (combinedObject.hasOwnProperty(currentObjectKey)) {
				__.getDataObject()[currentObjectKey] = combinedObject[currentObjectKey];

				if (currentObjectKey === 'page' && !!__.cachedObjects && __.cachedObjects.length > 0) {

					while(__.cachedObjects.length > 0) {
						__.sendOnCachedObject(__.cachedObjects.shift());
					}
				}
			}
		}
	};
	/**
	 * check whether page object is contained in data layer
	 * @returns {boolean} - true if page object is contained, false else
	 */
	__.isPageObjectInDataLayer = function() {
		return __.isPageObjectInTrackingObject(__.getDataObject());
	};
	/**
	 * check whether page object is contained in data object
	 * @param {Object} dataObject - the data object to check
	 * @returns {boolean} - true if page object is contained, false else
	 */
	__.isPageObjectInTrackingObject = function(dataObject) {
		if (!!dataObject && !!dataObject.page) {
			return true;
		}
		return false;
	};
	/**
	 * cache a tracking object locally
	 * @param {Object} trackingObject - the tracking object to cache
	 * @returns {void}
	 */
	__.cacheTrackingObject = function(trackingObject) {
		if (typeof __.cachedObjects === 'undefined') {
			__.cachedObjects = [];
		}
		__.cachedObjects.push(trackingObject);
	};
	/**
	 * send on a cached object
	 * @param {Object} combinedObject - the object to push
	 * @returns {void}
	 */
	__.sendOnCachedObject = function(combinedObject) {
		var analyticsContainer = __.getWebAnalyticsContainer();
		analyticsContainer.push(combinedObject);
	};
	/**
	 * push combined tracking data to interface
	 * @param {Object} combinedObject - the complete tracking object to push
	 * @return {void}
	 */
	exports.sendData = function(combinedObject) {
		var analyticsContainer = __.getWebAnalyticsContainer();
		var i, currentObjectKey, analyticsObject = {};
		__.storeRegisteredInDataObject(combinedObject);

		// push only registered objects to analytics
		for (i = 0; i < __.oDefaults.registeredAnalyticsObjects.length; i++) {
			currentObjectKey = __.oDefaults.registeredAnalyticsObjects[i];
			if (combinedObject.hasOwnProperty(currentObjectKey)) {
				analyticsObject[currentObjectKey] = combinedObject[currentObjectKey];
			}
		}

		if (__.isPageObjectInDataLayer() === true || __.isPageObjectInTrackingObject(combinedObject)) {
			analyticsContainer.push(analyticsObject);
		} else {
			__.cacheTrackingObject(analyticsObject);
		}
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 22:
/*!*************************************************!*\
  !*** ./js/app/tracking/objects/event-object.js ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	'use strict';
	var exports = {};
	/**
	 * build up the event object according to the spec
	 * @param {Object} dataObject - the data object to add the event to
	 * @param {String} eventAction - the event action (mandatory)
	 * @param {String} eventName - the name of the event (may be empty)
	 * @param {String} eventType - the event type
	 * @param {Object} eventAttributes - additional event attributes (may be empty object)
	 * @returns {Promise} - promise resolving with an event-enriched tracking object
	 */
	exports.getData = function(dataObject, eventAction, eventName, eventType, eventAttributes) {//eslint-disable-line max-params
		return new Promise(function(resolve) {
			var returnObject = dataObject;
			returnObject.event = dataObject.event ? dataObject.event : [];
			returnObject.event.push({
				eventInfo: {
					eventAction: eventAction,
					eventName: eventName,
					type: eventType
				},
				attributes: eventAttributes
			});
			resolve(returnObject);
		});
	};
	exports.getTrackingConfigurationStartType = function(rawConfigurationStartType) {
		var trackingCongigurationStartType = 'new configuration';

		if (!!rawConfigurationStartType) {
			if (rawConfigurationStartType.indexOf('audicode') !== -1) {
				trackingCongigurationStartType = 'audicode';
			} else if (rawConfigurationStartType.indexOf('carstore') !== -1) {
				trackingCongigurationStartType = 'audicode';
			} else if (rawConfigurationStartType.indexOf('prstring') !== -1) {
				trackingCongigurationStartType = 'prstring';
			}
		}
		return trackingCongigurationStartType;
	};
	exports.getTrackingSource = function(rawConfigurationStartType) {
		var trackingSource = '';

		if (!!rawConfigurationStartType) {
			if (rawConfigurationStartType.indexOf('carstore') !== -1) {
				trackingSource = 'carstore';
			} else if (rawConfigurationStartType.indexOf('input') !== -1) {
				trackingSource = 'input form';
			} else if (rawConfigurationStartType.indexOf('link') !== -1) {
				trackingSource = 'link';
			} else if (rawConfigurationStartType.indexOf('user-configuration') !== -1) {
				trackingSource = 'local storage';
			} else if (rawConfigurationStartType.indexOf('configuration-change') !== -1) {
				trackingSource = 'change';
			} else if (rawConfigurationStartType.indexOf('configuration-reset') !== -1) {
				trackingSource = 'reset';
			} else if (rawConfigurationStartType.indexOf('teaser') !== -1) {
				trackingSource = 'teaser';
			} else if (rawConfigurationStartType.indexOf('search') !== -1) {
				trackingSource = 'onsite search';
			}
		}
		return trackingSource;
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 23:
/*!******************************!*\
  !*** ./js/app/module/iph.js ***!
  \******************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global vee24 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! utils/ajax */ 6),
	__webpack_require__(/*! core/template */ 5),
	__webpack_require__(/*! text!templates/iph-cart.tpl */ 235)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(EVENTS, AJAX, TPL_RENDERER, IPH_TPL) {
	"use strict";
	var __ = {},
		exports = {
			'__': __
		};
	// private vars
	__.oDefaults = {
		sClassIPHActive: 'nm-iph-active',
		sSelectorLinkList: '.nm-basket-linklist',
		sSelectorIPHCancelBtn: '.nm-iph-item .nm-icon-cancel',
		sSelectorIPHWrapper: '.nm-iph-wrapper'
	};
	/**
	 * parse partner id from URL
	 * @returns {String} partnerID - the parsed partner id
	 */
	exports.parsePartnerID = function() {
		var partnerID = false;
		if (window.location.search && window.location.search.indexOf("partner_id=") > -1) {
			partnerID = window.location.search.split("partner_id=")[1];
		} else if (window.location.hash && window.location.hash.indexOf("partner_id=") > -1) {
			partnerID = window.location.hash.split("partner_id=")[1];
		}
		if (partnerID) {
			partnerID = partnerID.split("&")[0];
		}
		return partnerID;
	};
	exports.addPartnerId = function(origHref) {
		var href = origHref;
		if (href.indexOf('partner=') === -1) {
			if (href.indexOf('?') > -1) {
				href += '&partner=' + localStorage.getItem('iphdealerBNR');
			} else {
				href += '?partner=' + localStorage.getItem('iphdealerBNR');
			}
		}
		return href;
	};
	exports.updateNWB = function(href) {
		if (href.search(/(a)+[a-z]*(nwbp)+/g) === -1) {
			return href.replace(/(a)+[a-z]*(nwb)+/g, function myFunction(x){return x + 'p';});
		}
		return href;
	};
	exports.inIPHMode = function() {
		return __.isWithinLifecycle();
	};
	/**
	 * update dealer links:
	 * - add partner parameter
	 * - replace aXXnwb with aXXnwbp
	 * @param {DOMElement} domElement - DOM element to apply on
	 * @returns {void}
	 */
	__.updateDealerLinks = function(domElement) {
		var i, len, href, localVtpLink;
		var vtpLinks = domElement.querySelectorAll('.nm-j-vtp-link');

		if (vtpLinks && vtpLinks.length > 0) {

			for (i=0,len=vtpLinks.length; i<len; i++) {
				localVtpLink = vtpLinks[i];
				href = localVtpLink.getAttribute('href');
				href = exports.addPartnerId(href);
				localVtpLink.setAttribute('href', exports.updateNWB(href));
			}
		}
	};

	/**
	 * update dealer data-tracking-link:
	 * - replaces whole data-tracking-link value for iph-special value
	 * @returns {void}
	 */
	__.updateTrackingLinkDealer = function() {
		var i,len,linklistLIs = document.querySelectorAll('.nm-basket-linklist li'),link,
		linklistLi, linktext, dataTrackingLinksValue,eVarProp39, eVarProp46;
		//dataTrackingLinksValue = "{&quot;eVar39&quot;:&quot;"+linktext+"_cart-link&quot;,&quot;prop39&quot;:&quot;"+linktext+"_cart-link&quot;}";
		//dataTrackingLinksValue = "{"eVar39":"+linktext+"_cart-link","prop39":"+linktext+"_cart-link"}";
		if (linklistLIs && linklistLIs.length) {
			for (i=0,len=linklistLIs.length; i<len; i++) {
				linklistLi = linklistLIs[i];
				if(!linklistLi.classList.contains("nm-iph-item")){
					linktext = linklistLi.querySelector('a')?linklistLi.querySelector('a').getAttribute('title'):null;
					if(!!linktext){
						eVarProp39 = '"IPH-'+linktext+'_cart-link"';
						eVarProp46 = '":nemo configuration cart:'+linktext+'_click:'+localStorage.getItem('iphdealerBNR')+'"';
						dataTrackingLinksValue = '{"eVar39":'+eVarProp39+',"prop39":'+eVarProp39+', "eVar46":'+eVarProp46+',"prop46":'+eVarProp46+'}';
						link=linklistLi.querySelector('a');
						if(link){
							link.setAttribute('data-tracking-link', dataTrackingLinksValue);
						}
					}
				}

			}
		}
	};
	/**
	 * Send CRM data using the Vee24 JavaScript API
	 * @param {String} dealerBNR_ - Dealer Name to Submit
	 * @param {String} dealerName_ - Dealer Name to Submit
	 * @returns {void}
	 */
	__.sendCustomerDataToVeeAPI = function(dealerBNR_, dealerName_) {
		var POA_Data = [ ];
		if ( typeof vee24 !== 'undefined' ) {
			POA_Data.push( new vee24.crm.Data( "BNR", dealerBNR_ ) );
			POA_Data.push( new vee24.crm.Data( "Audipartner", dealerName_ ) );
			vee24.crm.submit( "Customer Information", POA_Data );
		}
	};
	/**
	 * enable IPH mode for basket
	 * @param {DOMElement} domElement - DOM element to apply on
	 * @returns {void}
	 */
	__.enableIPH = function(domElement) {
		var data = {
				'dealerName': localStorage.getItem('iphdealerName') || '',
				'dealerBNR': localStorage.getItem('iphdealerBNR') || '',
				'dealerURL': localStorage.getItem('iphdealerURL') || '',
				'dealerPhoneLabel': 'Tel.',
				'dealerPhone': localStorage.getItem('iphdealerPhone') || '-'
			},
			wrapper = domElement.querySelector(__.oDefaults.sSelectorIPHWrapper),cancelBtn;
		if (wrapper) {
			document.querySelector('body').classList.add(__.oDefaults.sClassIPHActive);
			wrapper.innerHTML = TPL_RENDERER.render(IPH_TPL, data);
			cancelBtn = domElement.querySelector(__.oDefaults.sSelectorIPHCancelBtn);
			__.sendCustomerDataToVeeAPI(data.dealerBNR, data.dealerName);
			if (cancelBtn) {
				cancelBtn.addEventListener('click', __.disableIPHBasket);
			}

			if (SETUPS.get('iph.dealerlink') === true) {
				__.updateDealerLinks(domElement);
				__.updateTrackingLinkDealer(domElement);
			}
		}
	};
	/**
	 * disable IPH basket
	 * @param {Event|null} event - click Event
	 * @returns {void}
	 */
	__.disableIPHBasket = function(event) {
		document.querySelector('body').classList.remove(__.oDefaults.sClassIPHActive);
		localStorage.removeItem('iphdealer');
		if (event) {
			this.removeEventListener('click', __.disableIPHBasket);
		}
	};
	/**
	 * provide search URL for given partnerID
	 * @param {String} partnerID - the partnerID to search for
	 * @returns {String} search URL to retrieve dealer data
	 */
	__.getDealerSearchUrl = function(partnerID) {
		var clientID = SETUPS.get('iph.clientid') ? SETUPS.get('iph.clientid') : 'e2aaa0fa0c';
		var dealersearchURL = SETUPS.get('iph.dealersearchurl') ? SETUPS.get('iph.dealersearchurl') : 'dealersearch.audi.com/api/json/v2/audi-deu';
		return '//' + dealersearchURL + '/id?q=' + partnerID + '&clientId=' + clientID;
	};
	/**
	 * get partner info for given partner ID
	 * @param {String} partnerID - the partner ID to get infos for
	 * @returns {Promise} - promise for ajax call to search URL and json parsing
	 */
	__.getPartnerInfo = function(partnerID) {
		var url = __.getDealerSearchUrl(partnerID);
		if (!!__.dealerData) {
			return Promise.resolve(__.dealerData);
		} else {
			return AJAX.getJSON(url, null, {
				"withCredentials": false
			});
		}
	};
	/**
	 * check whether IPH session is within lifecycle
	 * @returns {void}
	 */
	__.isWithinLifecycle = function() {
		var dateNow, timeElapsed = 0;
		var givenHours = !!SETUPS.get('iph.lifecycle') ? parseInt(SETUPS.get('iph.lifecycle'), 10) : 24;
		var hourLifeTime = givenHours * 60 * 60 * 1000;
		if (localStorage.getItem('iphdealer') && localStorage.getItem('iphdealerBNR')) {
			dateNow = Date.now();
			timeElapsed = dateNow - parseInt(localStorage.getItem('iphdate'), 10);
			if (timeElapsed < hourLifeTime) {
				return localStorage.getItem('iphdealerBNR');
			}
		}
		return false;
	};
	/**
	 * check whether partner id active (via session or via URL parameter)
	 * @param {Object} eventData - the domElement from the event to operate on
	 * @returns {void}
	 */
	__.checkForPartnerID = function(eventData) {
		var partnerID = exports.parsePartnerID(),
			domElement = !!eventData && !!eventData.domElement && !!eventData.domElement[0] ? eventData.domElement[0] : document;

		if (!partnerID && __.isWithinLifecycle()) {
			__.enableIPH(domElement);
		} else {
			__.disableIPHBasket();
			if (partnerID) {
				__.getPartnerInfo(partnerID).then(function(data) {
					if (!!data && !!data.meta && data.meta.returnCode === 'OK' && data.partners && data.partners.length > 0) {
						localStorage.setItem('iphdealer', true);
						localStorage.setItem('iphdealerBNR', partnerID);
						localStorage.setItem('iphdate', Date.now());
						localStorage.setItem('iphdealerName', data.partners[0].name);
						localStorage.setItem('iphdealerURL', data.partners[0].url);
						localStorage.setItem('iphdealerPhone', data.partners[0].contactDetails.phone.international);
						__.enableIPH(domElement);
					}
				});
			}
		}
	};
	/**
	 * check whether partner id is active via local storage
	 * @param {Object} eventData - the domElement from the event to operator on
	 * @returns {void}
	 */
	__.checkForPartnerIdInLocalStorage = function(eventData) {
		var domElement = !!eventData && !!eventData.domElement && !!eventData.domElement[0] ? eventData.domElement[0] : document;

		if (__.isWithinLifecycle()) {
			__.enableIPH(domElement);
		} else {
			__.disableIPHBasket();
		}
	};
	/**
	 * initialize
	 * @param {Emitter} eventBus_ - the event bus
	 * @returns {void}
	 */
	exports.initializePromise = function(eventBus_) {
		return new Promise(function(resolve) {
			__.eventBus = eventBus_;
			if (SETUPS.get('iph.scope') === "1") {
				__.eventBus.on(EVENTS.PAGE_LOADED, __.checkForPartnerIdInLocalStorage);
				__.checkForPartnerID();
			}
			resolve('module/iph.js');
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 234:
/*!*******************************************!*\
  !*** ./js/app/bundles/tracking-bundle.js ***!
  \*******************************************/
/*! exports provided: MICROCONVERSION, OMNITURE_API, OMNITURE_CONSTANSTS, CONFIG, DISPATCHER, UTILS, PAGE, RENDERINGLAYER, FORM, SEARCH, CONFIGURATION, LINK, TEASER, COMPONENT, GSA, EVENTS_CLICK, EVENTS_PAGE, EVENTS_LAYER, EVENTS_CONFIGURATION, EVENTS_CONVERSION */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tracking_microconversions_tracker__ = __webpack_require__(/*! tracking/microconversions-tracker */ 75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tracking_microconversions_tracker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_tracking_microconversions_tracker__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_tracking_omniture_api__ = __webpack_require__(/*! tracking/omniture-api */ 59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_tracking_omniture_api___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_tracking_omniture_api__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_tracking_omniture_constants__ = __webpack_require__(/*! tracking/omniture-constants */ 29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_tracking_omniture_constants___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_tracking_omniture_constants__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_tracking_tracking_config__ = __webpack_require__(/*! tracking/tracking-config */ 60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_tracking_tracking_config___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_tracking_tracking_config__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_tracking_tracking_dispatcher__ = __webpack_require__(/*! tracking/tracking-dispatcher */ 13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_tracking_tracking_dispatcher___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_tracking_tracking_dispatcher__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_tracking_tracking_utils__ = __webpack_require__(/*! tracking/tracking-utils */ 14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_tracking_tracking_utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_tracking_tracking_utils__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_tracking_page_tracker__ = __webpack_require__(/*! tracking/page-tracker */ 62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_tracking_page_tracker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_tracking_page_tracker__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_tracking_renderinglayer_tracker__ = __webpack_require__(/*! tracking/renderinglayer-tracker */ 20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_tracking_renderinglayer_tracker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_tracking_renderinglayer_tracker__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_tracking_form_tracker__ = __webpack_require__(/*! tracking/form-tracker */ 76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_tracking_form_tracker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_tracking_form_tracker__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_tracking_search_tracker__ = __webpack_require__(/*! tracking/search-tracker */ 77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_tracking_search_tracker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_tracking_search_tracker__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_tracking_configuration_tracker__ = __webpack_require__(/*! tracking/configuration-tracker */ 61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_tracking_configuration_tracker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_tracking_configuration_tracker__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_tracking_link_tracker__ = __webpack_require__(/*! tracking/link-tracker */ 78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_tracking_link_tracker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_tracking_link_tracker__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_tracking_teaser_tracker__ = __webpack_require__(/*! tracking/teaser-tracker */ 79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_tracking_teaser_tracker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_tracking_teaser_tracker__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_tracking_component_tracker__ = __webpack_require__(/*! tracking/component-tracker */ 80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_tracking_component_tracker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_tracking_component_tracker__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_tracking_gsa_tracker__ = __webpack_require__(/*! tracking/gsa-tracker */ 81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_tracking_gsa_tracker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_tracking_gsa_tracker__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_tracking_events_click_tracking__ = __webpack_require__(/*! tracking/events/click-tracking */ 83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_tracking_events_click_tracking___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_tracking_events_click_tracking__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_tracking_events_page_tracking__ = __webpack_require__(/*! tracking/events/page-tracking */ 84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_tracking_events_page_tracking___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_tracking_events_page_tracking__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_tracking_events_layer_tracking__ = __webpack_require__(/*! tracking/events/layer-tracking */ 88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_tracking_events_layer_tracking___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_tracking_events_layer_tracking__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_tracking_events_configuration_tracking__ = __webpack_require__(/*! tracking/events/configuration-tracking */ 89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_tracking_events_configuration_tracking___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_tracking_events_configuration_tracking__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_tracking_events_conversion_tracking__ = __webpack_require__(/*! tracking/events/conversion-tracking */ 90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_tracking_events_conversion_tracking___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19_tracking_events_conversion_tracking__);
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "MICROCONVERSION", function() { return __WEBPACK_IMPORTED_MODULE_0_tracking_microconversions_tracker___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "OMNITURE_API", function() { return __WEBPACK_IMPORTED_MODULE_1_tracking_omniture_api___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "OMNITURE_CONSTANSTS", function() { return __WEBPACK_IMPORTED_MODULE_2_tracking_omniture_constants___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "CONFIG", function() { return __WEBPACK_IMPORTED_MODULE_3_tracking_tracking_config___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "DISPATCHER", function() { return __WEBPACK_IMPORTED_MODULE_4_tracking_tracking_dispatcher___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "UTILS", function() { return __WEBPACK_IMPORTED_MODULE_5_tracking_tracking_utils___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "PAGE", function() { return __WEBPACK_IMPORTED_MODULE_6_tracking_page_tracker___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "RENDERINGLAYER", function() { return __WEBPACK_IMPORTED_MODULE_7_tracking_renderinglayer_tracker___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "FORM", function() { return __WEBPACK_IMPORTED_MODULE_8_tracking_form_tracker___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "SEARCH", function() { return __WEBPACK_IMPORTED_MODULE_9_tracking_search_tracker___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "CONFIGURATION", function() { return __WEBPACK_IMPORTED_MODULE_10_tracking_configuration_tracker___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "LINK", function() { return __WEBPACK_IMPORTED_MODULE_11_tracking_link_tracker___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "TEASER", function() { return __WEBPACK_IMPORTED_MODULE_12_tracking_teaser_tracker___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "COMPONENT", function() { return __WEBPACK_IMPORTED_MODULE_13_tracking_component_tracker___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "GSA", function() { return __WEBPACK_IMPORTED_MODULE_14_tracking_gsa_tracker___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "EVENTS_CLICK", function() { return __WEBPACK_IMPORTED_MODULE_15_tracking_events_click_tracking___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "EVENTS_PAGE", function() { return __WEBPACK_IMPORTED_MODULE_16_tracking_events_page_tracking___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "EVENTS_LAYER", function() { return __WEBPACK_IMPORTED_MODULE_17_tracking_events_layer_tracking___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "EVENTS_CONFIGURATION", function() { return __WEBPACK_IMPORTED_MODULE_18_tracking_events_configuration_tracking___default.a; });
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "EVENTS_CONVERSION", function() { return __WEBPACK_IMPORTED_MODULE_19_tracking_events_conversion_tracking___default.a; });


























/***/ }),

/***/ 235:
/*!*************************************************************************!*\
  !*** /opt/app/nemo/node_modules/raw-loader!./js/templates/iph-cart.tpl ***!
  \*************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = "<li class=\"nm-iph-item\">\n\t<a href=\"{{=it.dealerURL}}\" target=\"_blank\" class=\"nm-iph-item nm-iph-name nm-el-pg nm-el-pg-04 nm-at-pg-b\" title=\"{{=it.dealerName}}\" data-tracking-link=\"{&quot;prop39&quot;:&quot;IPH-HÃ¤ndlerseite_cart-link&quot;,&quot;prop46&quot;:&quot;:nemo configuration cart:IPH-dealer_click:{{=it.dealerBNR}}&quot;}\">{{=it.dealerName}}</a>\n\t<a x-cq-linkchecker=\"skip\" href=\"#\" class=\"nm-icon-cancel\" data-tracking-link=\"{&quot;prop39&quot;:&quot;IPH-close button_cart-link&quot;,&quot;prop46&quot;:&quot;:nemo configuration cart:IPH-close button_click:{{=it.dealerBNR}}&quot;}\"></a>\n</li>\n<li class=\"nm-iph-item\">\n\t<span class=\"nm-iph-phone nm-el-pg nm-el-pg-04\">{{=it.dealerPhoneLabel}} {{=it.dealerPhone}}</span>\n</li>"

/***/ }),

/***/ 29:
/*!***********************************************!*\
  !*** ./js/app/tracking/omniture-constants.js ***!
  \***********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global s */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		"use strict";

	//availableEvents
	return {
		none: "",
		//================================
		// events
		//================================

		// contact request
		contactRequest: "event2",

		//Configuration started
		//Bei Wechsel der Derivate wird aktuell jeweils ein neuer Konfigurationsstart gezÃ¤hlt,
		//auch bei RÃ¼ckkehr zum vorherigen Derivat.
		configurationStarted: "event7",

		//"Micro-Conversion started(= Configuration successful)"
		//"When configuration is completed ->
		//When any of the following microconversions is started:
		//e.g.- Click on ""pdf""
		microConversionStarted: "event8",

		//Micro-Conversion completed
		//directly after event8
		//Bei Mikro-Konversionen, welche bei einem einzigen Klick sowohl gestartet als auch beendet sind
		//(z.B. pdf) soll zeitgleich event8 und event9 gesetzt werden.
		microConversionEnded: "event9",

		//Dealer Request
		//Counts the number of dealer requests within the configurator.
		//On request confirmation page.
		dealerRequest: "event13",

		// Newsletter registration
		newsletterRegistration: "event29",

		// test drive request
		testDriveRequest: "event31",

		//Counts how often a configuration was taken in the car chat.
		//As soon as car chat was completed.
		carChat: "event35",

		//Counts how often a configurations was recommended via facebook, mail, etc.
		//As soon as recommendation is completed.
		recommendation: "event36",

		//Counts how often the configuration is started via an Audi Code.
		//Is sent when Audi Code is entered.
		enteredWithAudiCode: "event38",

		//Counts how often a configuration was saved.
		//When configuration was saved succesfully.
		configurationSaved: "event39",

		//Counts how often a configuration pdf was downloaded.
		//On pdf download link.
		pdfDownloadClick: "event40",

		//Counts how often a configuration was printed.
		//On print link.
		print: "event42",

		//Counts how often a technical data page was viewed.
		//On technical data page.
		technicalData: "event64",

		//Counts how often the Your Audi page was viewed.
		//On "Your Audi" layer page.
		yourAudiLayer: "event65",

		//Tracking of the configuration value of pre-selected configuration
		//When configuration is started (user selects first item or clicks on "Konfiguration starten")
		//-> Javascript Event: Configuration Start
		//Value of pre-selected configuration!
		//Bei Wechsel der Derivate wird aktuell jeweils ein neuer Konfigurationsstart gezÃ¤hlt,
		//auch bei RÃ¼ckkehr zum vorherigen Derivat.
		configurationStarted2: "event66",

		//Tracking of the configuration value of completed configuration
		//When configuration is completed ->
		//When any of the following microconversions is started:
		//e.g.- Click on "pdf"
		configurationCompleted: "event67",

		//Conflict Site Metrics Counts the number of conflict layers. On conflict layer
		conflictLayerOpened: "event73",

		//Conflict Cancel Site Metrics Counts the number of canceled conflict layers.
		//On cancel button on conflict layer.
		conflictCanceled: "event74",

		//Conflict Confirm Site Metrics Counts the number of confirmed conflict layers.
		//On confirm button on conflict layer.
		conflictConfirmed: "event75",

		//Conflict Alternatives show Site Metrics Tracks if user looks at alternatives in conflict layer.
		//On show alternatives button on conflict layer.
		conflictShowAlternatives: "event76",

		//Conflict Alternative Item selected Site Metrics Tracks if user looks clicks on checkbox of
		//an alternative item. On checkbox of alternative item on conflict layer.
		conflictSelectAlternative: "event77",

		//Item selected Site Metrics Tracks if user selects an item.
		//On checkbox of all items. Every time the checkbox is clicked.
		itemActivelySelected: "event78",

		//Configuration successful (once per configuration) e.g. event79:12345
		configurationCompleted2: "event79",

		//Micro-Conversion completed (once per configuration) e.g. event80:12345
		microConversionEnded2: "event80",

		// Audi Code Shown
		audicodeShown: "event83",

		// Audi Code Shown (with eventId)
		audicodeShown2: "event84",

		// Form Tracking
		// Form Starts
		formStarted: "event81",
		formCompleted: "event82",


		//================================
		// eVars
		//================================
		itemCategoriesEngines:"eVar21",
		itemCategoriesExteriorItems:"eVar22",
		itemCategoriesInteriorItems:"eVar25",
		itemSelectionMethod:"eVar29",
		itemPrNumber:'eVar34',
		itemCategoryStandardItems:'eVar35',
		itemCategoryTrimlineItems:'eVar60',
		itemCategoriesEquipmentItems:'eVar61',
		itemCategoriesAccessoryItems:'eVar62',
		//================================
		// sProps
		//================================
		configurationItems:"prop61"
	};
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 30:
/*!***********************************!*\
  !*** ./js/app/module/audicode.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global SETUPS, Promise */
/* eslint max-params: [2, 5] */
/**
 * TODO: #audicode-003 - resolve dependency to template
 */

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! jquery */ 1),
	__webpack_require__(/*! utils/ajax */ 6),
	__webpack_require__(/*! configurator/dpu-api */ 3),
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! qrcode */ 208),
	__webpack_require__(/*! utils/dom */ 2)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, AJAX, CONFIGURATOR_API, EVENTS, QRCODE, DOM_UTILS) {
	'use strict';
	//Private Methods
	var __ = {},
		//Public API
		exports = {
			__: __
		};
	// private vars
	__.audicode = null;
	__.eventBus = null;

	// #audicode-003
	__.addEvents = function() {
		__.eventBus.on(EVENTS.CONFIG_UPDATE, __.deleteAudicode);
		__.eventBus.on(EVENTS.LAYER_LOADED, __.onLayerLoaded);
		__.legacyEventBus.on('click.nemo.audicode', '.nm-j-audicode-link', __.clickAudicodeLink);
	};

	__.removeEvents = function() {
		__.eventBus.off(EVENTS.CONFIG_UPDATE, __.deleteAudicode);
		__.eventBus.off(EVENTS.LAYER_LOADED, __.onLayerLoaded);
		__.legacyEventBus.off('click.nemo.audicode', '.nm-j-audicode-link', __.clickAudicodeLink);
	};
	//delete current audicode after each configuration update
	__.deleteAudicode = function() {
		__.audicode = null;
		__.eventBus.emit(EVENTS.AUDICODE_DELETED);
		// console.log('audicode deleted');
	};
	/**
	 * load AudiCode
	 * @param {string|null} prString - configuration as prString
	 * @returns {Promise} - JSON request promise
	 */
	__.loadAudiCodeRequest = function(prString) {
		var ids = prString || CONFIGURATOR_API.getPrString();
		// Returns a new promise.
		var url = CONFIGURATOR_API.getDpuUrl() + 'audicode';
		//return Promise
		return AJAX.getJSON(url, {
			'context': CONFIGURATOR_API.getContext(),
			'subsession': CONFIGURATOR_API.getSubsessionID()||'',
			'ids': ids
		});
	};
	/**
	 * load audicode funtion
	 * @returns {Promise} - load audicode promise
	 * is also used in audicode-iframe.js
	 */
	exports.loadAudiCode = function() {
		//load Audicode from DPU
		return new Promise(function(resolve, reject) {
			if (!!__.audicode && !!__.prString && __.prString === CONFIGURATOR_API.getPrString()) {
				resolve(__.audicode);
			}
			else {
				__.audicode = null;
				__.loadAudiCodeRequest().then(function(data) {
					if ( !!data && !!data.header && data.header.statuscode===200 && data.audicode && !!data.audicode.id) {
						__.audicode = data.audicode.id;
						//set new subsession
						if(!!data.header.subsession){
							CONFIGURATOR_API.setSubsessionID(data.header.subsession);
						}
						__.prString = CONFIGURATOR_API.getPrString();
						__.eventBus.emit(EVENTS.AUDICODE_SUCCESS);
						resolve(__.audicode);
					} else {
						__.eventBus.emit(EVENTS.AUDICODE_FAILED);
						reject(new TypeError("load AudiCode failed"));
					}
				}, function(err) {
					console.error(err);
					__.eventBus.emit(EVENTS.AUDICODE_FAILED);
					reject(new TypeError("load AudiCode error: " + err.message));
				});
			}
		});
	};
	/**
	 * check whether audicode field is on current page
	 * @returns {boolean} - true if present, false else
	 */
	__.isAudicodeFieldOnPage = function() {
		var audicodeFieldsLength = jQuery('.nm-j-audicode').length;
		return audicodeFieldsLength !== 0;
	};
	/**
	* get current audicode
	* @returns {string} audicode
	*/
	exports.getAudicode=function(){
		return __.audicode;
	};
	/**
	 * check for AudiCode fiels when opening a new layer
	 * @returns {void}
	 */
	__.onLayerLoaded = function() {
		//load audicode if an audicode field exits
		if (__.isAudicodeFieldOnPage()) {
			exports.loadAudiCode().then(__.onAudiCodeLoaded).catch(function(err) {
				__.error(err);
			});
		}
		return;
	};
	/**
	 * handle successful load AudiCode results
	 * @returns {void}
	 */
	__.onAudiCodeLoaded = function() {
		if (__.audicode) {
			__.generateQrCode();
			jQuery('.nm-j-audicode').html(__.audicode);
			jQuery('.nm-j-audicode-show').removeClass('nm-j-audicode-failure').removeClass('nm-j-audicode-loading');
		}
	};

	/**
	 * generateQrCode - uses qrcode.js library to generate qrcode
	 * @return {void} - returns nothing
	 */
	__.generateQrCode = function () {
		var element = DOM_UTILS.getElement('.nm-j-audicode-qrcode'),
			qrUrl,
			qrCode;
			if(DOM_UTILS.isElement(element)){
				element.innerHTML = "";
				qrUrl = element.getAttribute('data-qr-url');
				qrCode = new QRCODE(4, 'L');
				qrCode.addData(qrUrl +__.audicode);
				qrCode.make();

				element.innerHTML = qrCode.createSvgTag(4, 0);
			}
	};

	__.clickAudicodeLink = function(event) {
		var linkUrl;
		var $link = jQuery(this);
		//AudiCode exits
		if (__.audicode!==null) {
			linkUrl = $link.attr('data-link-pattern');

			linkUrl = linkUrl.replace('{{=audicode}}', __.audicode);
			$link.attr('href', linkUrl);
			return true;
		} else {
			//currently no AudiCode
			event.preventDefault();
			exports.loadAudiCode().then(function() {
				__.simulateAudiCodeLinkClick($link);
			}).catch(function(err) {
				__.error(err);
			});
		}
		return false;
	};
	/**
	 * simulate click event on the link wich contains the ADUCODE URL
	 * @param {Object} $linkEl - jQuery Element containing the AudiCode
	 * @returns {void}
	 */
	__.simulateAudiCodeLinkClick = function($linkEl) {
		var linkUrl = false;

		if (__.audicode) {
			linkUrl = $linkEl.attr('data-link-pattern');
			linkUrl = linkUrl.replace('{{=audicode}}', __.audicode);
		} else {
			linkUrl = $linkEl.attr('href');
		}

		if( !!linkUrl ) {
			document.location.href = linkUrl;
		}

	};
	__.error = function() {
		var $audicodeDisplay = jQuery('.nm-j-audicode-show');
		$audicodeDisplay.addClass('nm-j-audicode-failure');
	};

	/**
	 * Constructor
	 * @param {Object} legacyEventBus - the legacy event bus (e.g. for click events)
	 * @returns {void}
	 */
	__.initialize = function(legacyEventBus) {
		__.legacyEventBus = legacyEventBus;
		// var template = jQuery('#nm-configuration-carstore-list-tpl').html();
		// _templateFunction = doT.template(template);
		__.addEvents();

	};
	exports.initializePromise = function(eventBus_) {
		return new Promise(function(resolve) {
			__.eventBus = eventBus_;
			__.initialize(jQuery('body'));
			resolve("module/audicode.js");
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 41:
/*!************************************************!*\
  !*** ./js/app/tracking/objects/user-object.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! configurator/dpu-api */ 3)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(CONFIGURATOR_API) {
	'use strict';
	var __ = {},
		exports = {
			__: __
		};
	/**
	 * wrapper for configurator API
	 * @returns {boolean} whether user is currently logged in
	 */
	__.isLoggedIn = function() {
		return CONFIGURATOR_API.isLoggedIn();
	};
	/**
	 * returns the current user object
	 * @returns {Object} - the current user object
	 */
	__.getUserObject = function() {
		return {
			segment: {
				isLoggedIn: __.isLoggedIn()
			}
		};
	};
	/**
	 * get page object
	 * @param {Object} dataObject - the the base tracking object
	 * @return {Object} the page object
	 */
	exports.getData = function(dataObject) {
		return new Promise(function(resolve) {
			var returnObject = dataObject;
			returnObject.user = dataObject.user ? dataObject.user : [];
			returnObject.user.push(__.getUserObject());
			resolve(returnObject);
		});
	};

	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 59:
/*!*****************************************!*\
  !*** ./js/app/tracking/omniture-api.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* jshint maxparams: 7 */
/* jshint maxlen: 140 */
/* global Promise,s, initializeOmitureWithPlugins */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! jquery */ 1),
	__webpack_require__(/*! tracking/tracking-config */ 60),
	__webpack_require__(/*! tracking/omniture-constants */ 29),
	__webpack_require__(/*! configurator/dpu-api */ 3),
	__webpack_require__(/*! core/logging */ 16)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, OMNITURE_CONFIG, OMNITURE_EVENTS, CONFIGURATOR_API, LOGGING) {//eslint-disable-line max-params
    'use strict';
    //Private Methods
    var __ = {},
        //Public API
        exports = {
            __: __
        };
    __.LOGGER = LOGGING.createLogger('tracking');
    /**
     * serialize data for onmiture requests
     * @param {object} - data
     * @returns {string} - serialized request data
     */
    __.serializeData = function(data_) {
        // WARUM? serialize sollte s.t() erledigen
        return data_;
    };
    /**
     * method for direct/link-tracking
     * @param {object} data_ - tracking data
     */
    exports.trackNow = function(data_, name) {
        var prop;
        //guard to disable tracking if not defined
        if (exports.isOmnitureTrackingAvailable()) {
            if (exports.isOmnitureTrackingAvailable()) {
                data_['prop58'] = "D=mid";
                data_['eVar75'] = "D=mid";
                __.LOGGER.info('omniture-api.trackNow: ', data_);
                __.cleanUpGlobalOmnitureObject();
                if (typeof data_ === "object") {
                	s.linkTrackVars = '';

                    for (var propName in data_) {
                        if (data_.hasOwnProperty(propName)) {
                            //fill s.props
                            s[propName] = data_[propName];
                            //whitelist all props for usage in linktracking
                            if (s.linkTrackVars.length > 0) {
                                s.linkTrackVars += ",";
                            }
                            s.linkTrackVars += propName;
                        }
                    }
                    if(!!data_.events ) {
                		// in linkTrackingEvents we define, which events should be send (without id!)
						var linkTrackEvents = [];
						for(var i=data_.events.length-1; i>=0; i--) {
							linkTrackEvents.push(data_.events[i].replace(/:.+$/, '').replace(/=.+$/, '')
							);
						}
                        s.linkTrackEvents = linkTrackEvents.join(',');

                        // the real data needs to be in s.events
                        s.events = data_.events.join(',');
                	}

                }
                s.tl(true, 'o', name);
				__.LOGGER.info('omniture-api.trackNow: ', data_);
                if(typeof trackactions=== 'function') {
                    try {
                        trackactions({'tl': data_});
                    } catch(e) {
                        console.error('Tried to track to custom trackactions of mediacom, but something went wrong.', e);
                    }

                }

            } else {
                __.LOGGER.warning('omniture-api.track: s is not defined.');
            }

        }
    };
    /**
     * track data
     * @param {object} data_ - tracking data
     */
    exports.track = function(data_) {
        var prop;
        __.LOGGER.info('omniture-api.track: ', data_);
        if (exports.isOmnitureTrackingAvailable()) {
            data_['prop58'] = "D=mid";
            data_['eVar75'] = "D=mid";
            __.cleanUpGlobalOmnitureObject();
            //always convert events-array to string
            if(!!data_.events){
            	data_.events=data_.events.toString();
            }
            for (prop in data_) {
                if (data_.hasOwnProperty(prop)) {
                    s[prop] = data_[prop];
                }
            }
            s.t();
            if(typeof trackactions=== 'function' ) {
                try {
                    trackactions({'t': data_});
                } catch(e) {
                    console.error('Tried to track to custom trackactions of mediacom, but something went wrong.', e);
                }

            }
        } else {
            __.LOGGER.warning('omniture-api.track: s is not defined.');
        }
    };
    /**
     * check if omniture tracking is available
     * @returns {boolean}
     */
    exports.isOmnitureTrackingAvailable = function() {
        var omnitureAccount = __.getOmnitureAccount();
        if (!omnitureAccount) {
            return false;
        }
        if (typeof window.initializeOmitureWithPlugins === "undefined") {
            return false;
        }
        try {
            __.initializeOmniture(omnitureAccount);
        } catch (e) {
            __.LOGGER.error('omniture-api.trackNow: ', e);
        }
        if (typeof window.s === "undefined") {
            return false;
        }
        return true;
    };
    //============================================================
    // Media Tracking
    //============================================================
    exports.mediaOpen = function(mediaName, mediaLength) {
        //guard to disable tracking if not defined
        if (exports.isOmnitureTrackingAvailable()) {
            s.Media.open(mediaName, mediaLength, "mejs");
        }
    };
    exports.mediaPlay = function(mediaName, mediaOffset, segmentNum, segment, segmentLength) {//eslint-disable-line max-params
        //guard to disable tracking if not defined
        if (exports.isOmnitureTrackingAvailable()) {
            s.Media.play(mediaName, mediaOffset, segmentNum, segment, segmentLength);
        }
    };
    exports.mediaStop = function(mediaName, mediaOffset, skip) {
        //guard to disable tracking if not defined
        if (exports.isOmnitureTrackingAvailable()) {
            if (skip === true) {
                //Trick to send event71 as an extra event
                s.Media.contextDataMapping["a.media.segmentView"] = "event72,event71";
            }
            s.Media.stop(mediaName, mediaOffset);
            if (skip === true) {
                //reset "a.media.segmentView" to its original
                s.Media.contextDataMapping["a.media.segmentView"] = "event72";
            }
        }
    };
    exports.mediaClose = function(mediaName) {
        s.Media.close(mediaName);
    };
    __.getOmnitureAccount = function() {
        var $el = jQuery(".nm-track-load[data-track-account]");
        var omnitureAccount = $el.first().attr("data-track-account");
        return omnitureAccount;
    };
    __.initializeOmniture = function(omnitureAccount) {
 	if (!omnitureAccount) {
        omnitureAccount = __.getOmnitureAccount();
      }
      if (!omnitureAccount) {
          return false;
      }
      if (typeof initializeOmitureWithPlugins === "undefined") {
          __.LOGGER.error('[omniture-api].__.initializeOmniture(): `initializeOmitureWithPlugins` is undefined');
          return false;
      }
      //initialize omniture if nor done so before
      if (typeof s === "undefined") {
          initializeOmitureWithPlugins(omnitureAccount);
          // s.useForcedLinkTracking = false;
          // s.forcedLinkTrackingTimeout = 0;
          __.LOGGER.debug('[omniture-api].__.initializeOmniture(): omniture initialized');
      }
      return true;
    };
    __.removeVarFromGlobalOmnitureObject = function(sVarName) {
        //removes vars from global s object (only if defined)
        if (!!s[sVarName]) {
            s[sVarName] = '';
        }
    };
    __.cleanUpGlobalOmnitureObject = function() {
        var i = 0,
            svarArr;
        for (i = 100; i >= 0; i--) {
            s['prop' + i] = '';
            __.removeVarFromGlobalOmnitureObject('prop' + i);
            __.removeVarFromGlobalOmnitureObject('eVar' + i);
            __.removeVarFromGlobalOmnitureObject('hier' + i);
        }
        svarArr = [ /*'pageName',*/ 'channel', 'products', 'events', 'campaign', 'purchaseID', 'state', 'zip', 'server', 'linkName'];
        for (i = svarArr.length - 1; i >= 0; i--) {
            __.removeVarFromGlobalOmnitureObject(svarArr[i]);
        }
    };


	exports.initializePromise = function(eventBus_) {
		return new Promise(function(resolve) {
			__.eventBus = eventBus_;
			__.initializeOmniture();
			resolve("tracking/omniture-api.js");
		});
	};
    return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 60:
/*!********************************************!*\
  !*** ./js/app/tracking/tracking-config.js ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* jshint maxparams: 7 */
/* jshint maxlen: 140 */
/* global s*/
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! tracking/tracking-utils */ 14)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(UTILS) {
	'use strict';
	//Private Methods
	var __ = {},
		//Public API
		exports = {
			__: __
		};
	if (!!window.s) {
		//set static base variables (Language,country,application etc.)

	} else {
		// console.log('omniture namespace not available');
	}
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 61:
/*!**************************************************!*\
  !*** ./js/app/tracking/configuration-tracker.js ***!
  \**************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* jshint maxparams: 6 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! jquery */ 1),
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! configurator/dpu-api */ 3),
	__webpack_require__(/*! tracking/tracking-dispatcher */ 13),
	__webpack_require__(/*! tracking/tracking-utils */ 14),
	__webpack_require__(/*! tracking/omniture-constants */ 29)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, EVENTS, DPU_API, TRACKING_DISPATCHER, TRACKING_UTILS, OMNITURE_CONSTANTS) {//eslint-disable-line max-params
    'use strict';
    var __, exports;
    __ = {};
    exports = {
        __: __
    };
    __.lastChangedId = null;
    __.initialUniqueTrackingID = null;
    __.conflictStart = false;
    __.knownItemCategories = {
        //interior(eVar25)
        "upholstery": OMNITURE_CONSTANTS.itemCategoriesInteriorItems,
        "seat": OMNITURE_CONSTANTS.itemCategoriesInteriorItems,
        //equipment (eVar61)
        "equipment": OMNITURE_CONSTANTS.itemCategoriesEquipmentItems,
        //engines (eVar21)
        "engine": OMNITURE_CONSTANTS.itemCategoriesEngines,
        //accessory (eVar62)
        "accessory": OMNITURE_CONSTANTS.itemCategoriesAccessoryItems,
        //design lines/trimline (eVar60)
        "trimline": OMNITURE_CONSTANTS.itemCategoryTrimlineItems,
        //exterior (eVar22)
        "extcolor": OMNITURE_CONSTANTS.itemCategoriesExteriorItems
    };
    /**
     *@TODO: track configuration.reset(new), start, user-configurations(, carstore?)
     */
    __.addEvents = function() {
        __.eventBus.on(EVENTS.CONFIG_CHANGEREQUEST_START, TRACKING_UTILS.proxyMethod(__.trackConfigurationChanges, __));
        __.eventBus.on(EVENTS.CONFIG_START, TRACKING_UTILS.proxyMethod(__.trackConfigurationEntries, __));
        __.eventBus.on(EVENTS.CONFLICT_CLOSE, TRACKING_UTILS.proxyMethod(__.handleConflictClose, __));
    };
    /**
     * get omniture event name for the configuration starts:
     * 'teaser-audicode': entry with url param ?audicode=
     * 'teaser-prstring': entry with url param ?pr=
     * 'prstring.preconfs-teaser': click preconfigurated teaser with prstring
     * 'audicode.preconfs-teaser': click preconfigurated teaser	with audicode
     * 'audicode-input': audicode was entered
     * 'audicode-link': link with audicode has been clicked
     * 'prstring-link': link with prString has been clicked
     * 'carstore': loaded configuration from carstore (ausparken)
     * 'configuration-change': click on a configuration items
     * 'audicode-search': laudicode was entered in the search box
     * 'user-configuration': entry with loaded configuration from local storage
     * 'configuration-reset': click on restart button ("Neue Konfiguration starten")
     * @param {String} startType_ - the configuraton start type
     * @returns {String} - the corresponding configuration start name
     */
    __.getConfigurationStartName = function(startType_) {
        var configStartName = "";
        switch (startType_) {
            case 'audicode-link':
            case 'prstring-link':
            case 'teaser-audicode':
            case 'teaser-prstring':
            case 'prstring.preconfs-teaser':
            case 'audicode.preconfs-teaser':
                configStartName = "derivate-start-page"; //"start-page-teaser";
                break;
            case 'carstore':
                configStartName = "carstore";
                break;
            case 'configuration-change':
                configStartName = "item-selection";
                break;
            default:
                configStartName = "adopt_configuration";
        }
        return configStartName;
    };

    /**
     * track configuration entries via prstring or audicode
     * @param event - custom event
     * @param startType_ - startType:
     *'{entry': 'audicode'||'prstring'||'user-configuration'||default-prstring'}
     * }
     */
    __.trackConfigurationEntries = function(startType_) {
        //starttype
        var startType = __.getConfigurationStartName(startType_),
            configuration = DPU_API.getConfiguration(),
            configValue,
            configId,
            //Preis der Basiskonfiguration
            trackingEvents = [],
            configItemsProps = null,
            configItem = '',
            trackingData = {},
            item = null,
            derivate = "NeMo:" + (DPU_API.getCarlineName() || ""),
            //get all selected Items (including standrad items)
            selectedItem = DPU_API.getItem(__.lastChangedId);
        configValue = parseInt(exports.getCurrentConfigurationValue(), 10);
        configId = exports.getUniqueIdForThisConfiguration();
        trackingEvents.push("event7");
        trackingEvents.push("event66=" + configValue + ':' + configId);
        configItemsProps = TRACKING_UTILS.generateConfigStartItemPropertiesArr(selectedItem);
        configItem = TRACKING_UTILS.getAppName() + ":" + configItemsProps.join(",");
        trackingData = {
            'eVar15': 'started',
            'eVar70': startType,
            'events': trackingEvents,
            'eVar16': derivate,
            'prop16': derivate
        };
        //add Products and price on configuration start
        var data = exports.getConfigurationData();
        trackingData.products = data.products;
        if (data.eVar23) {
            trackingData.eVar23 = data.eVar23;
        }
        //track start via item-selection/click)
        if (startType === "item-selection") {
            trackingData.prop62 = configItem;
            trackingData.events.push("event78");
            TRACKING_DISPATCHER.trackNow(trackingData, 'configuration');
        } else {
            //track all other configuration-starts
            TRACKING_DISPATCHER.track(trackingData);
        }
    };
    /**
     * track configuration changes by click (add,remove) or count changes
     * @param {Event} event_ - custom event
     * @param {Object} data_ - custom data object:
     *'{triggerAction': 'changeCount'||'click',
     *  '$element': _$element',
     *  'action':'itemAdd'||'itemRemove',
     *  'count':0â¦||null,'id':prNumber
     * }
     * @returns {void}
     */
    __.trackConfigurationChanges = function(data_) {
        var selectedItem, action, count, $triggerElement, isConflictAlternative;
        //save the last chenged item for later!!!
        if (!!data_ && data_.id) {
            __.lastChangedId = data_.id;
        }
        /* NEMOBA-2158
        //donÂ´t track configuration start!!!
        if (DPU_API.getConfigurationStartType() === "default") {
        	console.log("Configuration war started via item click");
        	return false;
        }*/
        selectedItem = __.lastChangedId;
        count = data_.count;
        if (!!count) {
            selectedItem += "*" + data_.count;
        }
        action = data_.action === "itemAdd" ? "set" : "remove";
        //handle "set" changes only
        if (action === "set") {
            //wait for next configuration update (dpu response)
            __.eventBus.one(EVENTS.CONFIG_UPDATE, TRACKING_UTILS.proxyMethod(__.handlePostConfigurationChangeRequest, __, {
                changedId: __.lastChangedId,
                $triggerElement: data_.$element
            }));
        }
    };

	//reset conflict start and trigger LinkTracking
	__.handleConflictClose = function(data_) {

		var conflictTriggerItem=DPU_API.getConflictTriggers()[0];
		var trackingItem = TRACKING_UTILS.getAppName() + ":" + TRACKING_UTILS.generateConfigStartItemPropertiesArr(conflictTriggerItem).join(",");
		var trackingData = {
			'eVar72':trackingItem,
			'prop73':trackingItem,
			'events': [(data_.action === 'cancel') ? 'event74' : 'event75']
		};
		// add carlineName to every link clicked on model-pages
		var carlineName = DPU_API.getCarlineName();

		// prop67 always need to be the pagename
		trackingData.prop67 = TRACKING_UTILS.getPageName();

		if ( !!carlineName && typeof trackingData.prop16==='undefined') {
			trackingData.prop16 = 'NeMo:' + carlineName;
		}
		TRACKING_DISPATCHER.trackNow(trackingData, 'configuration');
		__.conflictStart = false;
	};

	/**
	 * checks for an event whether it origins from the recommendation module
	 * @param {Event} event_ - the event to check
	 * @returns {Bool} true of wrapping ul contains module class, false else
	 */
	__.eventOriginsFromRecommendationModule = function(data) {
		var toReturn = false;
		if (data && data.$triggerElement) {
			toReturn = data.$triggerElement.closest('ul').hasClass('nm-list-summary-dyn-recommendation');
		}
		return toReturn;
	};

	/**
	 * checks for an event whether it origins from the aoz module
	 * @param {Object} data - the event payload object
	 * @returns {boolean} true if wrapping div contains module class, else false
	 */
	__.eventOriginsFromAozModule = function(data) {
		var toReturn = false;
		if (data && data.$triggerElement) {
			toReturn = data.$triggerElement.closest('div').hasClass('nm-aoz-btn');
		}
		return toReturn;
	};

	__.handleConflictFreeConfigurationChange = function(data) {
		var item, trackingItem, aozTrackingItem, trackingData, pageName;
		__.conflictStart = false;
		item = DPU_API.getItem(data.changedId);
		trackingItem = TRACKING_UTILS.getAppName() + ":" + TRACKING_UTILS.generateConfigStartItemPropertiesArr(item).join(",");

		if (__.eventOriginsFromRecommendationModule(data)) {
			trackingData = {
				'events': ['event78'],
				'prop62': trackingItem,
				'prop39': "recommendation_module",
				'eVar39': "recommendation_module",
				'prop46': "recommendation_module:add_item:" + trackingItem,
				'eVar46': "recommendation_module:add_item:" + trackingItem
			};
		} else if (__.eventOriginsFromAozModule(data)) {
			aozTrackingItem = TRACKING_UTILS.getAppName() + ":" + TRACKING_UTILS.generateConfigStartItemPropertiesArr(item).join(":");
			pageName = TRACKING_UTILS.getPageName();
			trackingData = {
					'events': ['event78'],
					'eVar37': pageName,
					'prop39': "aoz_tire_module:add_item:" + aozTrackingItem,
					'eVar39': "aoz_tire_module:add_item:" + aozTrackingItem,
					'prop46': pageName + ":aoz_tire_module:add_item:" + aozTrackingItem,
					'eVar46': pageName + ":aoz_tire_module:add_item:" + aozTrackingItem,
					'prop57': pageName,
					'prop62': aozTrackingItem,
					'eVar71': 'configuration_items_selection'
				};
		} else {
			trackingData = {
				'events': ['event78'],
				'prop62': trackingItem
			};
		}
		TRACKING_DISPATCHER.trackNow(trackingData, 'configuration');
	};

	__.handleConflictConfigurationChangeFirst = function(data) {
		var item, trackingItem, aozTrackingItem, trackingData, triggers, pageName;

		//handle conflict trigger
		triggers = DPU_API.getConflictTriggers();
		item = DPU_API.getItem(triggers[0].id);

		if (!item) {
			console.log("Conflict trigger Item was not found");
			return false;
		} else {
			trackingItem = TRACKING_UTILS.getAppName() + ":" + TRACKING_UTILS.generateConfigStartItemPropertiesArr(item).join(",");
			if (__.eventOriginsFromRecommendationModule(data)) {
				trackingData = {
					//event73
					'events': [OMNITURE_CONSTANTS.conflictLayerOpened],
					'eVar72': trackingItem,
					'prop73': trackingItem,
					'prop68': 'conflict_layer',
					'prop39': "recommendation_module",
					'eVar39': "recommendation_module",
					'prop46': "recommendation_module:add_item:" + trackingItem,
					'eVar46': "recommendation_module:add_item:" + trackingItem
				};
			} else if (__.eventOriginsFromAozModule(data)) {
				aozTrackingItem = TRACKING_UTILS.getAppName() + ":" + TRACKING_UTILS.generateConfigStartItemPropertiesArr(item).join(":");
				pageName = TRACKING_UTILS.getPageName();
				trackingData = {
					'events': [OMNITURE_CONSTANTS.conflictLayerOpened],
					'eVar37': pageName,
					'prop39': "aoz_tire_module:add_item:" + aozTrackingItem,
					'eVar39': "aoz_tire_module:add_item:" + aozTrackingItem,
					'prop46': pageName + ":aoz_tire_module:add_item:" + aozTrackingItem,
					'eVar46': pageName + ":aoz_tire_module:add_item:" + aozTrackingItem,
					'prop57': pageName,
					'prop62': aozTrackingItem,
					'prop68': 'conflict_layer',
					'eVar71': 'configuration_items_selection',
					'eVar72': aozTrackingItem,
					'prop73': aozTrackingItem
				};
			} else {
				trackingData = {
					//event73
					'events': [OMNITURE_CONSTANTS.conflictLayerOpened],
					'eVar72': trackingItem,
					'prop73': trackingItem,
					'prop68': 'conflict_layer'
				};
			}
			TRACKING_DISPATCHER.track(trackingData, 'conflict');
		}
	};

	__.handleConflictConfigurationChangeAlternatives = function(data) {
		var item, trackingItem, aozTrackingItem, trackingData, pageName;

		item = DPU_API.getItem(data.changedId);
		trackingItem = TRACKING_UTILS.getAppName() + ":" + TRACKING_UTILS.generateConfigStartItemPropertiesArr(item).join(",");

		if (__.eventOriginsFromRecommendationModule(data)) {
			trackingData = {
				//event77
				'events': [OMNITURE_CONSTANTS.conflictSelectAlternative],
				'eVar72': trackingItem,
				'prop73': trackingItem,
				'prop62': trackingItem,
				'prop39': "recommendation_module",
				'eVar39': "recommendation_module",
				'prop46': "recommendation_module:add_item:" + trackingItem,
				'eVar46': "recommendation_module:add_item:" + trackingItem
			};
		} else if (__.eventOriginsFromAozModule(data)) {
			aozTrackingItem = TRACKING_UTILS.getAppName() + ":" + TRACKING_UTILS.generateConfigStartItemPropertiesArr(item).join(":");
			pageName = TRACKING_UTILS.getPageName();
			trackingData = {
				'events': [OMNITURE_CONSTANTS.conflictSelectAlternative],
				'eVar37': pageName,
				'prop39': "aoz_tire_module:add_item:" + aozTrackingItem,
				'eVar39': "aoz_tire_module:add_item:" + aozTrackingItem,
				'prop46': pageName + ":aoz_tire_module:add_item:" + aozTrackingItem,
				'eVar46': pageName + ":aoz_tire_module:add_item:" + aozTrackingItem,
				'prop57': pageName,
				'prop62': aozTrackingItem,
				'prop68': 'conflict_layer',
				'eVar71': 'configuration_items_selection',
				'eVar72': aozTrackingItem,
				'prop73': aozTrackingItem
			};
		} else {
			trackingData = {
				//event77
				'events': [OMNITURE_CONSTANTS.conflictSelectAlternative],
				'eVar72': trackingItem,
				'prop73': trackingItem,
				'prop62': trackingItem
			};
		}
		TRACKING_DISPATCHER.trackNow(trackingData, 'configuration');
	};

	/**
	 * handle first configuration uptade after a configuration click/change request
	 * @param {event} event_ - custom event event data {changedId:prNumber}
	 * @returns {void}
	 */
	__.handlePostConfigurationChangeRequest = function(data) {

		//handle updates without conflicts here
		if (!TRACKING_UTILS.getConflicts()) {
			__.handleConflictFreeConfigurationChange(data);
		}
		//configuration contains a conflict
		//s.events=event75 => plain linktracking
		//s.events=event74 => plain linktracking
		//s.events=event76 => plain Link Tracking
		else {
			//first occurrence of a conflict (conflict-start)
			if (!__.conflictStart) {
				__.handleConflictConfigurationChangeFirst(data);
			} else {
				//handle conflict alternatives (conflict configuration continued)
				__.handleConflictConfigurationChangeAlternatives(data);
			}
			__.conflictStart = true;
		}
	};

	/**
	 * get current configuration tracking data (s.products etc...)
	 * method gets called on configuration end/micromconversion end
	 * @returns {object} - omniture tracking data on configuration ends
	 */
	exports.getConfigurationData = function() {
		var data = {};
		var engine;
		var configuration = DPU_API.getConfiguration();
		data.products = __.getProductsArr().join(",");
		//eVar23=NeMo:OverallPrice:RawPrice:ExtrasPrice
		if (!!configuration && !!configuration.prices && !!configuration.prices.totalRaw && !!configuration.prices.modelRaw && !!configuration.prices.optionsRaw) {
			data.eVar23 = 'NeMo:' + parseInt(configuration.prices.totalRaw, 10) + ':' + parseInt(configuration.prices.modelRaw, 10) + ':' + parseInt(configuration.prices.optionsRaw, 10);
		}
		engine = DPU_API.getItem(DPU_API.getEngine());
		engine = TRACKING_UTILS.generateConfigStartItemPropertiesArr(engine).join(",");
		data.eVar21 = "NeMo:" + engine.replace(/,|;/g, " ");
		//event67?
		//event79?
		return data;
	};

	exports.getCurrentConfigurationValue = function() {
		var configuration = DPU_API.getConfiguration();

		if (!!configuration && !!configuration.prices && !!configuration.prices.totalRaw) {
			return configuration.prices.totalRaw;
		}
		return null;
	};

	exports.getUniqueIdForThisConfiguration = function() {
		var subsessionID = DPU_API.getSubsessionID();

		if (subsessionID) {
			subsessionID = subsessionID.replace("-", "");
		} else if (__.initialUniqueTrackingID) {
			subsessionID = __.initialUniqueTrackingID;
		} else {
			__.initialUniqueTrackingID = Math.floor(Math.random() * 10000000000000001) + "";

			if (__.initialUniqueTrackingID.length > 8) {
				__.initialUniqueTrackingID = __.initialUniqueTrackingID.substring(0, 8);
			}
			subsessionID = __.initialUniqueTrackingID;
		}
		return subsessionID;
	};

	/**
	 * get an array of all serialized item properties
	 * @returns {array} - an array of products strings
	 */
	__.getProductsArr = function() {
		var sProductsArr = [],
			//selectedStandardItems = DPU_API.getItemsByStatus(new RegExp("(0|1){3}11")) || {},
			selectedItems = DPU_API.getItemsByStatus(new RegExp("(0|1){3}10")) || {},
			itemPropString = "";
		/* temporarily disable selected standard items (s.products query string beyond 2000 chars mark)
		//selected Standards (eVar35)
		jQuery.each(selectedStandardItems, function(itemId, item) {
			itemPropString = __.serializeConfigItemProperties(__.generateConfigItemProperties(item, true));
			sProductsArr.push(itemPropString);
		});
		*/
		//selected Items (eVar34)
		jQuery.each(selectedItems, function(itemId, item) {
			itemPropString = __.serializeConfigItemProperties(__.generateConfigItemProperties(item, false));
			sProductsArr.push(itemPropString);
		});
		return sProductsArr;
	};

	/**
	 * generate omniture item properties for sProducts
	 * @param {object} item_ - configuration item
	 * @param {Bool} isSelectedStandard_ - item selection state
	 * @returns {object} generated item properties
	 */
	__.generateConfigItemProperties = function(item_, isSelectedStandard_) {
		var itemProp = {
			category: '',
			family: ''
		};
		var price, familyProps;

		if (item_ && !!item_.family) {
			familyProps = DPU_API.getFamilies()[item_.family];
			itemProp.category = !!familyProps ? familyProps.group || "" : '';
			itemProp.family = !!familyProps ? familyProps.name || "" : '';
			/*
			if ( !! familyProps.type) {
				//eVar21,eVar22,eVar25,eVar60,eVar61,eVar62 (exterior,interior,engine,â¦)
				itemProp.type = __.knownItemCategories[familyProps.type]; //"eVar61";
			}
			itemProp.type=itemProp.type||__.knownItemCategories.equipment;
			*/
		}

		//eVar29 how the item was selected
		itemProp.selectionMethod = item_.selectionMethod || 'pre'; //"pre|active|conflict";
		//itemProp.selectionState = isSelectedStandard_ ? "eVar35" : "eVar34";
		itemProp.prNumber = item_.id;
		itemProp.product = item_.name || "";
		itemProp.mbvId = item_.mbvId;
		itemProp.unit = item_.count || 1;
		//set "Serie" to '0.00'
		price = (item_.price === window.i18n['standard']) ? null : item_.price;
		//price without currency symbol
		itemProp.price = parseInt((price || '0.00').replace(/[^\d\,]/g, ''), 10);
		return itemProp;
	};

	/**
	 * @param {Object} itemProps_ - item properties
	 * @returns {string} - serialized item properties as string
	 */
	__.serializeConfigItemProperties = function(itemProps_) {
		var itemPropsString = TRACKING_UTILS.getAppName() + ":";

		if (!itemProps_) {
			return "";
		}
		itemPropsString += itemProps_.category.replace(/,|;/g, " ") + ";"
			+ itemProps_.product.replace(/,|;/g, " ") + ";"
			+ itemProps_.unit + ";"
			+ itemProps_.price + ";"
			+ ";;";
		//itemPropsString += itemProps_.type + "=" + itemProps_.category;
		//'evar34' or 'eVar35' = rpNumber
		itemPropsString += "eVar35=" + (itemProps_.family || "").replace(/,|;/g, " ");
		itemPropsString += "|eVar34=" + itemProps_.prNumber;
		itemPropsString += "|eVar38=" + itemProps_.mbvId;
		itemPropsString += "|eVar29=" + itemProps_.selectionMethod;
		return itemPropsString;
	};

    __.initialize = function() {
        __.addEvents();
    };

	exports.initializePromise = function(eventBus_) {
		return new Promise(function(resolve) {
			__.eventBus = eventBus_;
			__.initialize();
			resolve("tracking/configuration-tracker.js");
		});
	};
    return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 62:
/*!*****************************************!*\
  !*** ./js/app/tracking/page-tracker.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* jshint maxparams: 7 */
/* jshint maxlen: 140 */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! jquery */ 1),
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! tracking/tracking-dispatcher */ 13),
	__webpack_require__(/*! core/logging */ 16),
	__webpack_require__(/*! tracking/tracking-utils */ 14),
	__webpack_require__(/*! configurator/dpu-api */ 3)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, EVENTS, DISPATCHER, LOGGING, TRACKING_UTILS, DPU_API) {//eslint-disable-line max-params
	'use strict';
	//Private Methods
	var __ = {},
		//Public API
		exports = {
			__: __
		};
	__.LOGGER = LOGGING.createLogger('tracking');

	__.addEvents = function() {
		__.eventBus.on(EVENTS.PAGE_LOADED, TRACKING_UTILS.proxyMethod(__.handlePageLoaded,__));
		__.eventBus.on(EVENTS.LAYER_LOADED, TRACKING_UTILS.proxyMethod(__.handleLayerLoaded,__));
	};

	/**
	 * handle layer change event (open+loaded)
	 * @param {Event} event_ - the layer loaded event
	 * @param {Object} data_ - event payload
	 * @returns {void}
	 */
	__.handleLayerLoaded = function(data_) {
		var pageData;

		if (!DPU_API.getConflictTriggers()) {
			pageData = __.getTrackingData(data_.element);
			DISPATCHER.trackPage(pageData, data_.element);
		}
	};

	/**
	 * handle page change event (open+loaded)
	 * @param {Object} data_ - event payload
	 * @returns {void}
	 */
	__.handlePageLoaded = function(data_) {
		var $element,pageData;
		// No tracking on some mssc pages (e.g. progress indicators)
		if(typeof data_.domElement!=='undefined') {
			$element = jQuery(data_.domElement);

			if ($element.hasClass('j-prevent-page-tracking')) {
				return;
			}
		}

		pageData = __.getTrackingData($element);
		__.LOGGER.debug('page-tracker.handlePageLoaded: ', data_);
		DISPATCHER.trackPage(pageData, $element);
	};

	/**
	 * Track the initial page load
	 * @returns {void}
	 */
	__.handleInitialPageLoad = function() {
		var $content = jQuery('.nm-content');
		var contentEl,pageData;

		if ($content.length) {
			contentEl = $content[0];
		}
		else{
			contentEl= jQuery('body');
		}
		__.LOGGER.debug('page-tracker.handleInitialPageLoad');
		pageData = __.getTrackingData(contentEl);
		DISPATCHER.trackPage(pageData, contentEl);
	};

	/**
	 * generate relevant page/layer data
	 * @returns {object} trackingObject
	 */
	__.getTrackingData = function ($element_) {
		var $element = ( typeof ($element_)!=='undefined' ) ? jQuery($element_) : jQuery('body');
		var trackingObject = {
			'server': window.location.host
		};

		var globalTrackingObject = TRACKING_UTILS.getGlobalObject();

		// merge the global and local tracking-objects
		trackingObject = jQuery.extend(trackingObject, globalTrackingObject);

		// full path without leading /
		var fullPath = TRACKING_UTILS.getUrl().replace(/^\//, '');

		trackingObject.prop1 = fullPath;
		trackingObject.pageName = fullPath.replace(/([\w-]*\/){3}/, '');

		if (fullPath.indexOf('renderingLayer') >= 0) {
			trackingObject.prop68 = "configuration_rendering_layer";
			trackingObject.eVar71 = "configuration_rendering_layer";
		}
		// full path without leading /de/brand/de/
		trackingObject.prop57 = trackingObject.pageName;
		trackingObject.eVar37 = trackingObject.pageName;

		trackingObject.hier1 = trackingObject.pageName;

		var splittedPath = trackingObject.pageName.split('/');

		// only the first category or an empty string
		// NEMOBA-2054: no channel for the homepage
		if( fullPath.split('/').length > 3 ) {
			trackingObject.channel = trackingObject.pageName.split('/')[0] || '';
		} else {
			splittedPath = [];
		}

		trackingObject.prop8 = (splittedPath.length > 1) ? trackingObject.channel + '/' + splittedPath[1] : '';
		trackingObject.prop9 = (splittedPath.length > 2) ? trackingObject.prop8 + '/' + splittedPath[2] : '';
		trackingObject.prop10 = (splittedPath.length > 3) ? trackingObject.prop9 + '/' + splittedPath[3] : '';
		trackingObject.prop11 = (splittedPath.length > 4) ? trackingObject.prop10 + '/' + splittedPath[4] : '';
		trackingObject.prop12 = (splittedPath.length > 5) ? trackingObject.prop11 + '/' + splittedPath[5] : '';
		trackingObject.prop13 = (splittedPath.length > 6) ? trackingObject.prop12 + '/' + splittedPath[6] : '';

		if( DPU_API.isConfigurable() ) {

			// e.g. "NeMo:A3 Sportback"
			trackingObject.prop16 = trackingObject.prop59 + ':' + DPU_API.getCarlineName();

			// Nemo Page Type
			if (trackingObject.prop68 !== 'configuration_rendering_layer') {
				trackingObject.prop68 = '';
			}

			// FIXME: Hier sollten wir nicht auf das Vorhandensein bestimmter Klassen (sprich: Komponenten) prÃ¼fen,
			// sondern die Seite semantisch auswerten (CQ?)
			if( $element.attr('data-type')==='nemo' && $element.attr('data-template')=== 'home' ) {
				trackingObject.prop68 = 'configuration_overview';
			}
			if($element.find('.nm-j-configurator-item').length ) {
				trackingObject.prop68 = 'configuration_items_selection';
			}
			if($element.find('.nm-summary-list').length ) {
				trackingObject.prop68 = 'configuration_items_overview';
			}
			if($element.find('.nm-mediathek-description').length ) {
				trackingObject.prop68 = 'configuration_items_info_layer';
			}
			if($element.find('#fdproxy').length ) {
				trackingObject.prop68 = 'financing_layer';
			}

			trackingObject.eVar71 = trackingObject.prop68;
			trackingObject.eVar24 = trackingObject.prop59 + ':' + trackingObject.prop2;
		}

		return trackingObject;
	};

	exports.getPageData = function() {
		return __.getTrackingData();
	};

	__.initialize = function() {
		__.addEvents();
		//delay: some trackers might not yet have been registered to the tracking-dispatcher??
		setTimeout(function(){
			TRACKING_UTILS.proxyMethod(__.handleInitialPageLoad,__)();
		}, 250);
	};

	exports.initializePromise = function(eventBus_) {
		return new Promise(function(resolve) {
			__.eventBus = eventBus_;
			__.initialize();
			resolve("tracking/page-tracker.js");
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 63:
/*!***************************************************!*\
  !*** ./js/app/tracking/objects/product-object.js ***!
  \***************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! configurator/dpu-api */ 3),
	__webpack_require__(/*! utils/polling */ 17)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(DPU_API, POLLING) {
	'use strict';
	var __ = {},
		exports = {
			__: __
		};
	__.oDefaults = {
		'pollTime': 2000,
		'sClassSelectable': 'nm-j-configurator-status_11000',
		'sClassSelectableConflict': 'nm-j-configurator-status_11100',
		'sClassSelected': 'nm-j-configurator-status_11010'
	};
	/**
	 * retrieve all relevant items in DOM
	 * @returns {Array} selectable, selectable with conflict and selected configuration items in currently viewed page
	 */
	__.collectProductItems = function() {
		var selectableItems = [].slice.call(document.getElementsByClassName(__.oDefaults.sClassSelectable));
		var selectableConflictItems = [].slice.call(document.getElementsByClassName(__.oDefaults.sClassSelectableConflict));
		var selectedItems = [].slice.call(document.getElementsByClassName(__.oDefaults.sClassSelected));
		return selectableItems.concat(selectableConflictItems, selectedItems);
	};
	/**
	 * collected product data from DPU-API
	 * @param {Array} items - the DOM items to collect data for
	 * @returns {Array} product items - array of product objects in the expected form
	 */
	__.collectProductData = function(items) {
		var i, currentItem;
		var productItems = [];
		var itemLen = items.length;

		for (i=0; i<itemLen; i++) {
			currentItem = DPU_API.getItem(items[i].getAttribute("data-configurator-id"));
			if (currentItem) {
				productItems.push(__.getProductItem(currentItem));
			}
		}
		return productItems;
	};
	/**
	 * get product info for DPU item
	 * @param {Object} dpuItem - the dpu item
	 * @return {Object} the product info
	 */
	exports.getProductInfo = function(dpuItem) {
		return {
			'productID': dpuItem.id,
			'productMbvId': dpuItem.mbvId,
			'productName': dpuItem.name ? dpuItem.name : "",
			'productURL': dpuItem.url ? dpuItem.url : "",
			'productImage': dpuItem.image ? dpuItem.image : "",
			'productThumbnail': dpuItem.image ? dpuItem.image : ""
		};
	};
	/**
	 * get the product category
	 * @param {Object} dpuItem - the dpu item
	 * @param {Object} families - dpu families
	 * @return {Object} the product category
	 */
	exports.getProductCategory = function(dpuItem, families) {
		var primaryCategory = '';
		var subCategory1 = '';
		var productType = '';
		var familyHierarchy;
		if (families && families[dpuItem.family]) {
			familyHierarchy = dpuItem.family.split('.');
			if (typeof familyHierarchy !== "undefined" && familyHierarchy.length > 0) {
				primaryCategory = familyHierarchy[0];
				if (familyHierarchy.length > 1) {
					subCategory1 = familyHierarchy[1];
				}
			}
			if (families[dpuItem.family].type && typeof families[dpuItem.family].type !== "undefined") {
				productType = families[dpuItem.family].type;
			}
		}
		return {
			'primaryCategory': primaryCategory,
			'subCategory1': subCategory1,
			'productType': productType
		};
	};
	/**
	 * gets a product item in the needed object structure
	 * @param {Object} dpuItem - the DPU item to create tracking object for
	 * @returns {Object} tracking object in the correct form
	 */
	__.getProductItem = function(dpuItem) {
		var families = DPU_API.getFamilies();
		return {
			'productInfo': exports.getProductInfo(dpuItem),
			'category': exports.getProductCategory(dpuItem, families),
			'attributes': {
				'cartAction': ''
			}
		};
	};
	/**
	 * retrieve selectable items from page and create array with tracking items
	 * @return {Array} array containing tracking items for page
	 */
	__.getProductItemsArray = function() {
		var items = __.collectProductItems();
		return __.collectProductData(items);
	};
	exports.patchCartActionForProductId = function(dataObject, action, productIds) {
		return new Promise(function(resolve) {
			var i, j, lenIds, lenProds;
			for (i=0, lenIds=productIds.length; i<lenIds; i++) {
				for (j=0, lenProds=dataObject.product.length; j<lenProds; j++) {
					if (productIds[i] === dataObject.product[j].productInfo.productID) {
						dataObject.product[j].attributes.cartAction = action;
					}
				}
			}
			resolve(dataObject);
		});
	};
	/**
	 * get product object
	 * @param {Object} dataObject - the the base tracking object
	 * @return {Object} the product object
	 */
	exports.getData = function(dataObject) {
		return new Promise(function(resolve) {
			var isNemoPage = false;
			if (document.querySelectorAll('.nm-content') &&
					document.querySelectorAll('.nm-content').length > 0 &&
					document.querySelectorAll('.nm-content')[0].getAttribute('data-type') &&
					document.querySelectorAll('.nm-content')[0].getAttribute('data-type') === 'nemo') {
				isNemoPage = true;
			}
			if (isNemoPage) {
				POLLING.wait(DPU_API.isInitialized, __.oDefaults.pollTime).then(function() {
					dataObject.product = __.getProductItemsArray();
					resolve(dataObject);
				}).catch(function() {
					resolve(dataObject);
				});
			} else {
				resolve(dataObject);
			}
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 75:
/*!*****************************************************!*\
  !*** ./js/app/tracking/microconversions-tracker.js ***!
  \*****************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! tracking/tracking-dispatcher */ 13),
	__webpack_require__(/*! tracking/configuration-tracker */ 61),
	__webpack_require__(/*! tracking/omniture-constants */ 29),
	__webpack_require__(/*! core/logging */ 16),
	__webpack_require__(/*! utils/polling */ 17),
	__webpack_require__(/*! configurator/dpu-api */ 3)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(EVENTS, TRACKING_DISPATCHER, CONFIGURATION_TRACKER, TRACKING_EVENTS, LOGGING, POLLING, DPU_API) {//eslint-disable-line max-params
	'use strict';

	var __, exports;
	__ = {};
	exports = {
		__: __
	};
	// The data object that is handed to the dispatcher.
	__.data = {};
	// Selectors.
	__.pdfClickSelector = '.nm-configuration-print';
	__.audiCodeShow = '.nm-j-audicode-show';
	// Relevant form ids.
	__.dealerSearchFormIds = {'sv_drd': true, 'tdrdealerreq': true};
	__.fdproxyFormId = 'fdproxy';
	__.carstoreFormId = 'carstore';
	// configurationEnded
	__.configurationStarted = false;
	__.configurationEnded = false;
	// microConversion status
	__.microConversionPending = false;

	/*
	 * Add an event string to __.data.events property.
	 * Create it if necessary.
	 */
	__.addTrackingEvent = function(eventString) {
		var i, isSet;
		if (eventString === undefined) {
			console.log('microconversions-tracker.__.addTrackingEvent: undefined event', eventString);
			return;
		}
		if (!__.data.events) {
			__.data.events = [];
		}
		// Make sure event is only added once.
		for (i = __.data.events.length - 1; i >= 0; i--) {
			if (__.data.events[i] === eventString) {
				isSet = true;
				break;
			}
		}
		if (!isSet) {
			__.data.events.push(eventString);
		}
	};
	/*
	 * Decorator function.
	 * Clean the state before executing the decorated function.
	 */
	__.cleanDataDecorator = function(fn) {
		return function(e) {
			try {
				fn();
				__.data = {};
			} catch (err) {
				console.log(err);
			}
		};
	};

	__.collectConfigurationData = function() {
		var data, key;
		data = CONFIGURATION_TRACKER.getConfigurationData();
		for (key in data) {
			if (data.hasOwnProperty(key)) {
				__.data[key] = data[key];
			}
		}
	};

	__.checkForm = function(element) {
		return new Promise(function(resolve, reject) {
			var form, formId, isFirstView, isFinished, configId;
			//element is 'form' itself or layer container wrapping a form
			form = jQuery(element).hasClass("nm-form")?jQuery(element):jQuery(element).find('.nm-form');
			// Do we even have a form?
			if(form.length > 0) {
				formId = form.attr('id');
				isFirstView = form.attr('data-form-is-first-view');
				isFinished = form.attr('data-form-is-finished');
				/*
				 * Form start
				 */
				if(!!isFinished) {
					configId = CONFIGURATION_TRACKER.getUniqueIdForThisConfiguration();
					__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded);
					__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded2 + ':' + configId);
					__.microConversionPending = false;
					if (!!__.dealerSearchFormIds[formId]) {
						// event31
						__.addTrackingEvent(TRACKING_EVENTS.testDriveRequest);
					}
					else if (formId === __.fdproxyFormId) {
						__.data.eVar30 = 'financingLayer';
					}
				}
				else if(!!isFirstView) {
					__.microConversionPending = true;
					if (!!__.dealerSearchFormIds[formId]) {
						__.data.eVar30 = 'dealerRequest';
					}
					else if (formId === __.fdproxyFormId) {
						__.data.eVar30 = 'financingLayer';
					}
					if (__.configurationStarted === true) {
						__.collectConfigurationData();
						__.endConfiguration();
					}
				}
			}
			resolve();
		});
	};

	/*
	 * Searches audicode element in container. Waits for code to be loaded
	 * and resolves the promise.
	 * @param {DOM Element} element -- The DOM container.
	 * @returns A promise object.
	 */
	__.checkAudiCode = function(element) {
		var configId = CONFIGURATION_TRACKER.getUniqueIdForThisConfiguration(),
			configValue, isLayer;
		isLayer = jQuery(element).hasClass('nm-layer-wrapper');
		if(!isLayer) {
			isLayer = jQuery(element).hasClass('nm-layer');
		}
		return new Promise(function(resolve, reject) {
			var hasSaveForm, hasLoginForm, configValue, hasFinishedForm, form;
			// only do something if this is a new layer with an audicode
			if (isLayer && jQuery(element).find(__.audiCodeShow).length > 0) {
				POLLING.wait(function() {
					var audicode;
					jQuery(element).find('.nm-j-audicode').each(function() {
						audicode = jQuery(this).text();
					});
					return audicode;
				}, 20000).then(function(audicode) {
					hasSaveForm = !!element.querySelector('.nm-save-form');
					hasLoginForm = !!element.querySelector('.nm-login-form');
					// set audicode eVars and events
					__.data.eVar10 = audicode;
					__.addTrackingEvent(TRACKING_EVENTS.audicodeShown); // event83
					__.addTrackingEvent(TRACKING_EVENTS.audicodeShown2 + ':' + configId); // event84

					// audicode save start
					if(hasSaveForm && hasLoginForm) {
						__.data.eVar30 = 'saveConfiguration';
					}
					// audicode show start and esaveConfigurationsaveConfigurationnd
					else {
						__.data.eVar30 = 'layerAudiCode';
						__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded); // event9
						__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded2 + ':' + configId); // event80
					}

					if (__.configurationStarted === true) {
						__.collectConfigurationData();
						configValue = parseInt(CONFIGURATION_TRACKER.getCurrentConfigurationValue(), 10);
						__.addTrackingEvent(TRACKING_EVENTS.configurationCompleted + '=' + configValue + ':' + configId);
						__.addTrackingEvent(TRACKING_EVENTS.configurationCompleted2 + ':' + configId);
						__.addTrackingEvent(TRACKING_EVENTS.microConversionStarted); // event8
						__.endConfiguration();
					}
					resolve();
				}, function() {
					console.log('AudiCode could not be retrieved.');
					resolve();
				});
			}
			else {
				resolve();
			}
		});
	};

	__.checkSummaryPage = function(element) {
		var configId, template;
		return new Promise(function(resolve, reject) {
			configId = CONFIGURATION_TRACKER.getUniqueIdForThisConfiguration(),
			template = jQuery(element).find('[data-template]').attr('data-template');
			// check for summary-total, so that only the summary-page is tracked
			if(template === 'summary' && jQuery(element).find('.nm-md-summary-total').length ) {
				__.data.eVar30 = 'yourAudiPageOpened';
				__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded); // event9
				__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded2 + ':' + configId); // event80
				__.addTrackingEvent(TRACKING_EVENTS.yourAudiLayer); // event65
				if (__.configurationStarted === true) {
					__.collectConfigurationData();
					__.endConfiguration();
				}
			}
			resolve();
		});
	};

	__.checkMssSummaryPage = function(element) {
		var configId, template;
		return new Promise(function(resolve, reject) {
			configId = CONFIGURATION_TRACKER.getUniqueIdForThisConfiguration(),
				template = jQuery(element).attr('data-template');
			// check for summary-total, so that only the summary-page is tracked
			if(template === 'summary' && jQuery(element).find('.nm-md-summary-total').length ) {
				__.data.eVar30 = 'yourAudiPageOpened';
				__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded); // event9
				__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded2 + ':' + configId); // event80
				__.addTrackingEvent(TRACKING_EVENTS.yourAudiLayer); // event65
				if (__.configurationStarted === true) {
					__.collectConfigurationData();
					__.endConfiguration();
				}
			}
			resolve();
		});
	};

	__.endConfiguration = function(trackNowName) {
		var configId, configValue;
		configId = CONFIGURATION_TRACKER.getUniqueIdForThisConfiguration();
		configValue = parseInt(CONFIGURATION_TRACKER.getCurrentConfigurationValue(), 10);
		__.addTrackingEvent(TRACKING_EVENTS.microConversionStarted); // event8
		__.addTrackingEvent(TRACKING_EVENTS.configurationCompleted + '=' + configValue + ':' + configId);
		__.addTrackingEvent(TRACKING_EVENTS.configurationCompleted2 + ':' + configId);
		__.configurationEnded = true;
		__.data.eVar15 = 'completed';
		if (trackNowName !== undefined) {
			TRACKING_DISPATCHER.trackNow(__.data, trackNowName);
			__.data = {};
		}
	};

	__.initialize = function() {
		// Add pdfClickSelector
		__.LOGGER = LOGGING.createLogger('tracking');
		__.legacyEventBus.on('click', __.pdfClickSelector, exports.pdfClickHandler);
		__.eventBus.on(EVENTS.CONFIG_START, exports.configurationStartHandler);
		__.legacyEventBus.on('click', '.nm-carstore-save .nm-save-form button',
			exports.carstoreSaveClickHandler);
		TRACKING_DISPATCHER.registerTracker(exports);
	};

	exports.startMssConversion = function(conversionType) {
		var configId, configValue;
		configId = CONFIGURATION_TRACKER.getUniqueIdForThisConfiguration();
		configValue = parseInt(CONFIGURATION_TRACKER.getCurrentConfigurationValue(), 10);
		__.addTrackingEvent(TRACKING_EVENTS.microConversionStarted); // event8
		__.addTrackingEvent(TRACKING_EVENTS.configurationCompleted + '=' + configValue + ':' + configId);
		__.addTrackingEvent(TRACKING_EVENTS.configurationCompleted2 + ':' + configId);
		__.configurationEnded = true;
		__.data.eVar15 = 'completed';
		__.data.eVar30 = conversionType;
		if (conversionType !== undefined) {
			TRACKING_DISPATCHER.trackNow(__.data, conversionType);
			__.data = {};
		}
	};

	exports.endMssConversion = function(conversionType) {
		var configId, configValue;
		configId = CONFIGURATION_TRACKER.getUniqueIdForThisConfiguration();
		__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded); // event9
		__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded2 + ':' + configId);
		__.configurationEnded = true;
		__.data.eVar30 = conversionType;
		if (conversionType !== undefined) {
			TRACKING_DISPATCHER.trackNow(__.data, conversionType);
			__.data = {};
		}
	};

	exports.triggerMssLayerAudiCodeConversion = function () {
		exports.triggerMssConversion('layerAudiCode');
	};

	exports.triggerMssYourAudiPageOpenedConversion = function () {
		exports.triggerMssConversion('yourAudiPageOpened');
	};

	exports.triggerMssConversion = function(conversionType) {
		var configId, configValue;
		configId = CONFIGURATION_TRACKER.getUniqueIdForThisConfiguration();
		configValue = parseInt(CONFIGURATION_TRACKER.getCurrentConfigurationValue(), 10);
		__.addTrackingEvent(TRACKING_EVENTS.microConversionStarted); // event8
		__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded); // event9
		__.addTrackingEvent(TRACKING_EVENTS.configurationCompleted + '=' + configValue + ':' + configId);
		__.addTrackingEvent(TRACKING_EVENTS.configurationCompleted2 + ':' + configId);
		__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded2 + ':' + configId);
		__.configurationEnded = true;
		__.data.eVar15 = 'completed';
		__.data.eVar30 = conversionType;
		if (conversionType !== undefined) {
			TRACKING_DISPATCHER.trackNow(__.data, conversionType);
			__.data = {};
		}
	};

	/**
	 * Handles PDF click micro conversion.
	 * Note: Decorated with the cleanDataDecorator.
	 *
	 * @param {Object} event - A jQuery style event object.
	 */
	exports.pdfClickHandler = function(e) {
		__.LOGGER.debug('microconversion: pdf click');
		var configId = CONFIGURATION_TRACKER.getUniqueIdForThisConfiguration();
		// Set microconversion type
		__.data.eVar30 = 'pdf';
		__.data.eVar10 = 'n.a.';
		// Mark audicode as shown and set value to 'n.a.' (inaccessible) event84,event84
		// event83
		__.addTrackingEvent(TRACKING_EVENTS.audicodeShown);
		// event84
		__.addTrackingEvent(TRACKING_EVENTS.audicodeShown2 + ':' + configId);
		//event40
		__.addTrackingEvent(TRACKING_EVENTS.pdfDownloadClick);
		//event9
		__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded);
		//event80
		__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded2 + ':' + configId);
		if (__.configurationStarted === true) {
			__.addTrackingEvent(TRACKING_EVENTS.microConversionStarted);
			// Store config data in  __.data
			__.collectConfigurationData();
			// End configuration without waiting for next page load.
			__.endConfiguration('pdf');
		}
		else {
			TRACKING_DISPATCHER.trackNow(__.data, 'pdf');
			__.data = {};
		}
	};

	exports.carstoreSaveClickHandler = function(e) {
		var configId = CONFIGURATION_TRACKER.getUniqueIdForThisConfiguration();
		__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded); // event9
		__.addTrackingEvent(TRACKING_EVENTS.microConversionEnded2 + ':' + configId);
		__.addTrackingEvent(TRACKING_EVENTS.configurationSaved); // event39
		TRACKING_DISPATCHER.trackNow(__.data, 'saveConfiguration');
		__.data = {};
	};

	exports.configurationStartHandler = function() {
		var configId, configValue;
		__.configurationStarted = true;
		__.LOGGER.debug('microconversion: configuration start');
		configId = CONFIGURATION_TRACKER.getUniqueIdForThisConfiguration();
		configValue = parseInt(CONFIGURATION_TRACKER.getCurrentConfigurationValue(), 10);
		__.configurationEnded = false;
	};

	exports.hasConfigurationEnded = function() {
		return __.configurationEnded;
	};

	/*
	 * Resets the internal state and resoolves the promise.
	 */
	__.resetAndResolve = function(resolve) {
		var data;
		data = __.data;
		__.data = {};
		__.LOGGER.debug('microconversion.getDataPromise: resolving with data:', data);
		resolve(data);
	};
	/**
	 * Collects current tracking data and returns it via a
	 * resolved Promise.
	 *
	 * The internal tracking data is reset when this method is called.
	 */
	exports.getDataPromise = function(element) {
		__.LOGGER.debug('microconversion.getDataPromise called');
		return new Promise(function(resolve, reject) {
			Promise.all([
				__.checkForm(element),
				__.checkAudiCode(element),
				__.checkSummaryPage(element)
				]).then(function() {
				__.resetAndResolve(resolve);
			}, function(err) {
				console.log(err);
				__.resetAndResolve(resolve);
			});
		});
	};

	exports.initializePromise = function(eventBus_) {
		return new Promise(function(resolve) {
			__.eventBus = eventBus_;
			__.legacyEventBus = jQuery('body');
			__.initialize();
			resolve("tracking/microconversions-tracker.js");
		});
	};

	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 1)))

/***/ }),

/***/ 76:
/*!*****************************************!*\
  !*** ./js/app/tracking/form-tracker.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global jQuery, Promise */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! events */ 0), __webpack_require__(/*! tracking/tracking-dispatcher */ 13), __webpack_require__(/*! tracking/omniture-constants */ 29), __webpack_require__(/*! core/logging */ 16), __webpack_require__(/*! tracking/tracking-utils */ 14), __webpack_require__(/*! tracking/page-tracker */ 62)], __WEBPACK_AMD_DEFINE_RESULT__ = function (EVENTS, TRACKING_DISPATCHER, TRACKING_EVENTS, LOGGING, TRACKING_UTILS, PAGE_TRACKER) { //eslint-disable-line max-params
	'use strict';
	var __, exports;
	__ = {};
	exports = {
		__: __
	};
	__.LOGGER = LOGGING.createLogger('tracking');
	// The data object that is handed to the dispatcher.
	__.data = {};
	__.addEvents = function () {
		__.eventBus.on(EVENTS.FORM_LOADED, TRACKING_UTILS.proxyMethod(__.handleFormLoaded, __));
		__.eventBus.on(EVENTS.FORM_FINISHED, TRACKING_UTILS.proxyMethod(__.handleFormFinished, __));
	};
	__.addTrackingEvent = function (eventString) {
		if (!__.data.events) {
			__.data.events = [];
		}
		__.data.events.push(eventString);
	};
	__.handleFormLoaded = function (data_) {
		var el, formData;
		el = document.getElementById(data_.id);
		if (el) {
			formData = __.collectFormAndPageData(data_.id, el);
			formData.events = formData.events || [];
			//is form start?
			if (el.getAttribute('data-form-is-first-view') === "1") {
				formData.events.push('event81');
			}
			TRACKING_DISPATCHER.trackPage(formData, el);
		}
	};
	__.collectFormAndPageData = function (id_, el_) {
		var data = {},
			pageData = PAGE_TRACKER.getPageData();
		data = {
			'eVar2': id_
		};
		if(el_){
			var processName = el_.getAttribute('data-form-process-name');
			if (!!processName) {
				data.eVar37 = id_ + "/" + processName;
				var step = el_.getAttribute('data-form-process-step');
				if (!!step) {
					data.eVar37 = id_ + "/" + step + "_" + processName;
				}
			}
		}
		//copy process step/page to pageName
		data.pageName = data.eVar37;
		data = jQuery.extend(true, pageData, data);
		return data;
	};
	__.handleFormFinished = function (data_) {
		var el, formData;
		el = document.getElementById(data_.id);
		formData = __.collectFormAndPageData(data_.id, el);
		formData.events = formData.events || [];
		if (data_.id === 'tdrdealerreq') {
			formData.events.push('event31');
		}
		formData.events.push('event82');
		TRACKING_DISPATCHER.trackPage(formData, el);
	};
	__.initialize = function () {
		__.addEvents();
	};
	exports.initializePromise = function (eventBus_) {
		return new Promise(function (resolve) {
			__.eventBus = eventBus_;
			__.initialize();
			resolve("tracking/form-tracker.js");
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 1)))

/***/ }),

/***/ 77:
/*!*******************************************!*\
  !*** ./js/app/tracking/search-tracker.js ***!
  \*******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! jquery */ 1),
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! core/logging */ 16),
	__webpack_require__(/*! tracking/tracking-dispatcher */ 13),
	__webpack_require__(/*! tracking/tracking-utils */ 14)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, EVENTS, LOGGING, TRACKING_DISPATCHER, TRACKING_UTILS) {//eslint-disable-line max-params
	'use strict';

	var __ = {},
	exports = {
		__: __
	};

	__.addEvents = function() {
		__.eventBus.on(EVENTS.SEARCH_OPEN, __.trackSearchLayer);
		__.eventBus.on(EVENTS.SEARCH_CLOSE, __.untrackSearchLayer);
	};
	__.initialize = function() {
		__.addEvents();
	};

	__.inputIntervalID = null;

	__.trackSearchLayer = function(data_) {
		var searchResultData, hasResult;
		if (__.inputIntervalID) {
			clearInterval(__.inputIntervalID);
		}
		searchResultData = data_;
		if (typeof searchResultData.search !== 'undefined' &&
				typeof searchResultData.footerSearch !== 'undefined' &&
				typeof searchResultData.modelSearch !== 'undefined' &&
				typeof searchResultData.siteMapSearch !== 'undefined' &&
				typeof searchResultData.searchListProposals !== 'undefined') {
			__.inputIntervalID = setInterval(function() {
				var data = {};
				data.prop7 = searchResultData.searchString;
				data.eVar3 = data.prop7;
				data.prop58 = TRACKING_UTILS.getPageName();
				data.eVar9 = "tools/nemo-search";
				hasResult = (searchResultData.search.length>0 || searchResultData.footerSearch.length>0 || searchResultData.modelSearch.length>0 || searchResultData.siteMapSearch.length>0 || searchResultData.searchListProposals.length>0);
				hasResult ? data.eVar5 = "successful" : "not successful";
				__.untrackSearchLayer();
				TRACKING_DISPATCHER.trackNow(data, "nemo-search");
			}, 2000);
		}
	};

	__.untrackSearchLayer = function() {
		clearInterval(__.inputIntervalID);
		__.inputIntervalID = null;
	};

	exports.initializePromise = function(eventBus_) {
		return new Promise(function(resolve) {
			__.eventBus = eventBus_;
			__.initialize();
			resolve("tracking/search-tracker.js");
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 78:
/*!*****************************************!*\
  !*** ./js/app/tracking/link-tracker.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! jquery */ 1),
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! tracking/tracking-dispatcher */ 13),
	__webpack_require__(/*! core/logging */ 16),
	__webpack_require__(/*! tracking/tracking-utils */ 14),__webpack_require__(/*! configurator/dpu-api */ 3)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, EVENTS, DISPATCHER, LOGGING, TRACKING_UTILS, DPU_API) { //eslint-disable-line max-params
        "use strict";
        var __ = {},
            exports = {
                __: __
            };
        __.oDefaults = {
            sSelectorDelegateClick: '.nm-toggle',
            sOptionsListHeadSelector: ".nm-options-list-head"
        };

        __.LOGGER = LOGGING.createLogger('tracking');
        __.linkClickedHandler = function(event) {
            var $el = jQuery(event.currentTarget);
            var linkProperties = $el.attr("data-tracking-link");
            var pagename = __.getCurrentPageName();
            if (!linkProperties) {
                linkProperties = $el.attr("data-linktracking");
            }
            try {
                linkProperties = jQuery.parseJSON(linkProperties);
            } catch (ex) {
                console.log("LINK-TRACKER JSON Parse ErrorError: ", ex.message, $el);
            }
            if (!!linkProperties) {
                // prop67 always need to be the pagename
                linkProperties.prop67 = pagename;
                if (!!linkProperties.events) {
                    if (typeof linkProperties.events === 'string') {
                        linkProperties.events = linkProperties.events.split(",");
                    }
                    //special case for conflict alternatives
                    if (linkProperties.events.indexOf("event76") >= 0 || linkProperties.events.indexOf("event73") >= 0) {
                        var conflictTriggers = DPU_API.getConflictTriggers();
                        if (conflictTriggers) {
                            var conflictTriggerItem = DPU_API.getConflictTriggers()[0];
                            var trackingItem = TRACKING_UTILS.getAppName() + ":" + TRACKING_UTILS.generateConfigStartItemPropertiesArr(conflictTriggerItem).join(",");
                            linkProperties.eVar72 = trackingItem;
                            linkProperties.prop72 = trackingItem;
                        }
                    }
                }
                if (!!linkProperties.prop46) {
                    var separator = "";
                    if (linkProperties.prop46.substr(0, 1) !== ':' && linkProperties.prop46.substr(0, 1) !== '|') {
                        separator = ":";
                    }
                    //prepend pagename to prop46 and add a separator if necessary
                    linkProperties.prop46 = pagename + separator + linkProperties.prop46;
                    linkProperties.eVar46 = linkProperties.prop46;
                }
                if (!!linkProperties.prop57 && linkProperties.prop57 === 'inlinerendering') {
                	linkProperties.prop57 = pagename;
                    linkProperties.eVar37 = linkProperties.prop57;
                }
                if (!!linkProperties.prop39) {
                    linkProperties.eVar39 = linkProperties.prop39;
                }
                // add carlineName to every link clicked on model-pages
                var carlineName = DPU_API.getCarlineName();
                if (!!carlineName && typeof linkProperties.prop16 === 'undefined') {
                    //check wether it's nemo or mss
                    var audic_mssc = window.mss || null;
                    var prefix = (!!audic_mssc) ? 'MSSC' : 'NeMo';
                    linkProperties.prop16 = prefix + ':' + carlineName;
                }
                DISPATCHER.trackNow(linkProperties, 'link');
            } else {
                console.log("LINK-TRACKER Error: missing data", $el);
            }
            __.LOGGER.debug('link.linkClickedHandler linkProperties: ', linkProperties);
        };
        __.updateCurrentPageName = function() {
            jQuery("body").attr("page-name", TRACKING_UTILS.getPageName());
        };
        __.getCurrentPageName = function() {
            return jQuery("body").attr("page-name");
        };
        __.updateTrackingLink = function(event) {
            var _$listHead = jQuery(this);
            var _$toggleBtn = _$listHead.find(__.oDefaults.sSelectorDelegateClick);
            var linkProperties;
            try {
                linkProperties = jQuery.parseJSON(_$toggleBtn.attr("data-tracking-link"));
                var suffix = _$toggleBtn.hasClass("nm-toggle-open") ? "_closed" : "_open";
                linkProperties.prop39 = linkProperties.prop39.split("_")[0] + suffix;
                linkProperties.eVar39 = linkProperties.prop39;
                var midVal = _$toggleBtn.hasClass("nm-toggle-open") ? "close optionlist" : "open optionlist";
                linkProperties.prop46 = linkProperties.prop46.split(":")[0] + ":" + midVal + ":" + linkProperties.prop46.split(":")[2];
                linkProperties.eVar46 = linkProperties.prop46;
                console.log("linkProperties", linkProperties);
                _$toggleBtn.attr("data-tracking-link", JSON.stringify(linkProperties));
            } catch (ex) {
                console.log("LINK-TRACKER JSON Parse ErrorError: ", ex.message, _$toggleBtn);
            }
        };
        __.addEvents = function() {
            //Bugfix for racecondition within the link tracking
            __.eventBus.on(EVENTS.LAYER_LOADED, __.updateCurrentPageName);
            __.eventBus.on(EVENTS.PAGE_READY, __.updateCurrentPageName);
            __.eventBus.on(EVENTS.LAYER_CLOSE, __.updateCurrentPageName);
            __.legacyEventBus.on('click.expertmode.tracking-toggle', __.oDefaults.sOptionsListHeadSelector, __.updateTrackingLink);
            __.legacyEventBus.on("click.link-tracking", "[data-tracking-link], [data-linktracking]", TRACKING_UTILS.proxyMethod(__.linkClickedHandler, __));
        };
        __.initialize = function() {
            __.updateCurrentPageName();
            __.addEvents();
        };

		exports.initializePromise = function(eventBus_) {
			return new Promise(function(resolve) {
				__.eventBus = eventBus_;
				__.legacyEventBus = jQuery('body');
				__.initialize();
				resolve("tracking/link-tracker.js");
			});
		};
        return exports;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 79:
/*!*******************************************!*\
  !*** ./js/app/tracking/teaser-tracker.js ***!
  \*******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! jquery */ 1),
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! tracking/tracking-dispatcher */ 13),
	__webpack_require__(/*! core/logging */ 16),
	__webpack_require__(/*! tracking/tracking-utils */ 14),
	__webpack_require__(/*! utils/polling */ 17)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, EVENTS, TRACKING_DISPATCHER, LOGGING, TRACKING_UTILS,POLLING) {//eslint-disable-line max-params

	"use strict";

	var __ = {},
		exports = {
			__: __
		};
	__.oDefaults = {
		selectorContainer: ".nm-homepage-md-configurator-teaser-selection",
		selectorConfigureNowButton: ".nm-j-enter-configurator-click"
	};
	__.teasersLoaded = false;

	__.LOGGER = LOGGING.createLogger('tracking');
	__.addEvents = function() {
		__.legacyEventBus.on("change.teaserselection", TRACKING_UTILS.proxyMethod(__.changeTrackingLink));
		__.eventBus.on(EVENTS.TEASER_ACTIVATED, __.onTeaserActivated);
		__.eventBus.on(EVENTS.TEASER_ALL_ACTIVATED, __.onAllTeasersLoaded);
	};

	__.initialize = function() {
		TRACKING_DISPATCHER.registerTracker(exports);
		__.addEvents();
		__.changeTrackingLink();
	};

	__.changeTrackingLink = function(event_) {
		var $context = jQuery(__.oDefaults.selectorContainer).find(__.oDefaults.selectorConfigureNowButton);
		var currentColor = jQuery("#nm-homepage-md-configurator-teaser-selection-color option:selected").text();
		var currentModel = jQuery("#nm-homepage-md-configurator-teaser-selection-type option:selected").text();
		if (!currentColor) {
			currentColor = jQuery("#nm-homepage-md-configurator-teaser-selection-color .active-color").attr('data-value');
		}
		if (!currentModel) {
			var jsonText = jQuery("#nm-homepage-md-configurator-teaser-selection-type .active-carline").attr('data-carline');
			var modelJSON = jsonText ? jQuery.parseJSON(jsonText) : '';
			currentModel = modelJSON ? modelJSON.id : '';
		}
		var trackingProp = jQuery.parseJSON($context.attr("data-tracking-link") || "{}");
		trackingProp["prop39"] = "homepage_teaser:" + currentModel + "_" + currentColor + "_configure_now";
		trackingProp["prop46"] = ":Click Configurator Teaser:homepage teaser - " + currentModel + " - " + currentColor + " - configure now";
		var trackingString = JSON.stringify(trackingProp);
		$context.attr("data-tracking-link", trackingString);
	};


	__.onTeaserActivated = function(customEvent) {
		//add linktracking to the teaser
		//var carline = $teaser.attr("data-carline");
		var $teaser = jQuery(customEvent.teaser);
		var rotationType = customEvent.rotationType;
		var headline = $teaser.attr("data-headline");
		var teaserRowNr = $teaser.parents(".nm-homepage-grid-container").position().top > 0 ? 2 : 1;
		var eVar64 = '';
		var teaserPosition = "";
		var trackingVarsStr = "";
		if ($teaser.parents('.nm-homepage-grid-column').length !== 0) {
			var teaserGridContainerNr = $teaser.parents('.nm-homepage-grid-container').index() + 1;
			if ($teaser.parents('.nm-homepage-grid-column-left').length !== 0) {
				eVar64 = "teaserbox/1/" + teaserRowNr;
			} else if ($teaser.parents('.nm-homepage-grid-column-middle').length !== 0) {
				eVar64 = "teaserbox/2/" + teaserRowNr;
			} else if ($teaser.parents('.nm-homepage-grid-column-right').length !== 0) {
				eVar64 = "teaserbox/3/" + teaserRowNr;
			}
		}

		var eVar65 = "general";
		if (rotationType === "interestBased") {
			eVar65 = "personal";
		}
		var eVar66 = "small";
		if ($teaser.hasClass('nm-homepage-grid-big-teaser')) {
			eVar66 = "big";
		}

		//new link tracking (frank)
		trackingVarsStr = JSON.stringify({
			eVar63: "teaserbox/" + headline,
			eVar64: eVar64,
			eVar65: eVar65,
			eVar66: eVar66,
			events: "event33"
		});
		$teaser.attr("data-tracking-link", trackingVarsStr);
	};
	/**
	 * Collects current tracking data and returns it via a
	 * resolved Promise.
	 *
	 * The internal tracking data is reset when this method is called.
	 */
	exports.getDataPromise = function(element) {
		var teaserData = {};
		return new Promise(function(resolve, reject) {
			POLLING.wait(function() {
				return __.teasersLoaded;
			},2000).then(function(){
				__.teaserData=__.collectTeaserData();
				__.LOGGER.debug('teaser-tracker.getDataPromise: resolving with data:', __.teaserData);
				resolve(__.teaserData);
			},function(){
				__.LOGGER.debug('teaser-tracker.getDataPromise: rejecting due to timeout');
				reject("Teaser-tracker:no teaserData collected");
			});
		});
	};

	__.onAllTeasersLoaded = function() {
		__.teasersLoaded = true;
	};

	__.collectTeaserData = function() {
		//actually this tracking should be done on page load, but on page load we cannot be sure that all teasers are completely loaded
		var data = {
			list1: [],
			events: "event32"
		},
			headline, $this;
		//do not return any da if no teaser is available within the current page
		if(!jQuery(".nm-homepage-grid-teaser[data-tracking-link]").length){
			return {};
		}
		//loop over all teasers
		jQuery(".nm-homepage-grid-teaser[data-tracking-link]").each(function(index) {
			$this = jQuery(this), headline = $this.attr("data-headline");
			data.list1.push("sub-stage_teaserbox_" + headline.replace(",", ""));
		});
		data.list1 = data.list1.join(",");
		return data;
	};

	exports.initializePromise = function(eventBus_) {
		return new Promise(function(resolve) {
			__.eventBus = eventBus_;
			__.legacyEventBus = jQuery('body');
			__.initialize();
			resolve("tracking/teaser-tracker.js");
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 80:
/*!**********************************************!*\
  !*** ./js/app/tracking/component-tracker.js ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global Promise*/
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! jquery */ 1),
	__webpack_require__(/*! tracking/tracking-dispatcher */ 13),
	__webpack_require__(/*! tracking/tracking-utils */ 14),
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! core/logging */ 16)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, TRACKING_DISPATCHER, TRACKING_UTILS, EVENTS, LOGGING) {//eslint-disable-line max-params
	"use strict";
	//Private Methods
	var __ = {},
		//Public API
		exports = {
			__: __
		};

	__.oDefaults = {
		sComponentTrackingDataSelector: "[data-tracking-component]",
		sComponentTrackingData: "data-tracking-component"
	};
	__.LOGGER = null;

	__.addEvents = function() {

	};

	__.initialize = function() {
		__.LOGGER = LOGGING.createLogger('tracking');
		TRACKING_DISPATCHER.registerTracker(exports);
		__.addEvents();
	};

	__.collectComponentData = function() {
		var $conmponents = jQuery(__.oDefaults.sComponentTrackingDataSelector),
			entry, trackingEvents, collectedData;
		collectedData = {};
		jQuery.each($conmponents, function(key, value) {
			try {
				entry = JSON.parse(jQuery(this).attr(__.oDefaults.sComponentTrackingData));
				//add tracking data to existing data
				if ( !!entry && !jQuery.isEmptyObject(entry) && typeof entry === 'object') {
					//look for 'events' object within the incoming tracking data
					trackingEvents = entry.events;
					//handle tracking event vars
					if (trackingEvents) {
						collectedData.events = collectedData.events || [];
						trackingEvents = trackingEvents.split(",");
						//join new evnts with existing events
						collectedData.events = collectedData.events.concat(trackingEvents);
						//strip events object from incoming tracking data
						delete entry.events;
					}
					//join data objects
					collectedData = jQuery.extend(true, collectedData, entry);
				} else {
					__.LOGGER.error("invalid entry: " + entry);
				}
			} catch (ex) {
				__.LOGGER.error("Parse Error: " + ex.message);
			}
		});
		return collectedData;
	};

	/**
	 * Collects current tracking data and returns it via a
	 * resolved Promise.
	 * @returns {Promise}
	 * The internal tracking data is reset when this method is called.
	 */
	exports.getDataPromise = function(element) {

		__.LOGGER.debug('component-tracker.getDataPromise called');
		return new Promise(function(resolve, reject) {
			var data = __.collectComponentData();
			__.LOGGER.debug('component-tracker.getDataPromise: resolving with data:', data);
			resolve(data);
		});
	};

	exports.initializePromise = function(eventBus_) {
		return new Promise(function(resolve) {
			__.eventBus = eventBus_;
			__.initialize();
			resolve("tracking/component-tracker.js");
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 81:
/*!****************************************!*\
  !*** ./js/app/tracking/gsa-tracker.js ***!
  \****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* jshint maxparams: 8 */
/* global Promise*/
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! jquery */ 1),
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! module/gsa-search */ 82),
	__webpack_require__(/*! core/logging */ 16),
	__webpack_require__(/*! tracking/tracking-dispatcher */ 13)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, EVENTS, GSA, LOGGING, TRACKING_DISPATCHER) {//eslint-disable-line max-params
	'use strict';
	var __, exports;
	__ = {};
	exports = {
		__: __
	};

	// The data object that is handed to the dispatcher.
	__.data = {};

	__.maxFetchTime = 600;
	// LOGGER
	__.LOGGER = LOGGING.createLogger('tracking');
	//main initialize method
	__.initialize = function() {
		// register module to tracking-dispatcher
		TRACKING_DISPATCHER.registerTracker(exports);
	};

	/**
	 * collect tracking data
	 * waits for pending results (AJAX search results)
	 * @returns {Promise} - Promise with collected data results
	 */
	__.collectDataPromise = function() {
		var intervalID, elapsed = 0,
			delayTime = 200,
			data = null;
		return new Promise(function(resolve, reject) {
			if (!GSA.getSearchQueryString()) {
				reject("no GSA searchQueryStr found!");
			} else {
				if (!GSA.hasPendingResults()) {
					data = __.readTrackingData();
					resolve(data);
				} else {
					//check if queue is finished or maxFetchTime is over
					intervalID = setInterval(function() {
						if (elapsed > __.maxFetchTime) {
							clearInterval(intervalID);
							reject("AJAX timeout fetching GSA HTML fragments");
						}
						if (!GSA.hasPendingResults()) {
							clearInterval(intervalID);
							data = __.readTrackingData();
							resolve(data);
						}
						elapsed += delayTime;
					}, delayTime);
				}
			}
		});
	};

	__.readTrackingData = function() {
		var trackingData = {};
		var searchQueryStr = GSA.getSearchQueryString();
		var searchResults = jQuery("a[data-gsa]");
		trackingData.prop7 = searchQueryStr;
		trackingData.eVar3 = trackingData.prop7;
		//has search results?
		trackingData.eVar5 = searchResults.length ? "successful" : "not successful";
		trackingData.eVar9 = "tools/search";
		trackingData.events = ['event28'];
		return trackingData;
	};

	/**
	 * Collects current tracking data and returns it via a
	 * resolved Promise.
	 *
	 * The internal tracking data is reset when this method is called.
	 * @param {Object} element - unused
	 * @returns {void}
	 */
	exports.getDataPromise = function(element) {
		return new Promise(function(resolve, reject) {
			__.collectDataPromise().then(function(trackingData) {
				__.LOGGER.debug('gsa-tracker.getDataPromise: resolving with data:', trackingData);
				resolve(trackingData);
			}, function(err) {
				__.LOGGER.debug('gsa-tracker.getDataPromise: rejected with error:', err.message);
				reject({});
			});
		});
	};

	exports.initializePromise = function(eventBus_) {
		return new Promise(function(resolve) {
			__.eventBus = eventBus_;
			__.initialize();
			resolve("tracking/gsa-tracker.js");
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 82:
/*!*************************************!*\
  !*** ./js/app/module/gsa-search.js ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* jshint maxparams: 8 */
/* global Promise*/
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! jquery */ 1),
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! utils/ajax */ 6)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, EVENTS, AJAX) {
	'use strict';
	var __, exports;
	__ = {};
	exports = {
		__: __
	};

	__.pending = false;

	__.initialize = function() {
		__.addEvents();
		//only init things if we are on a result page
		__.$SearchResultEl = jQuery(".gsa-search-result");
		if (__.$SearchResultEl.length > 0) {
			__.baseSearchURL = __.$SearchResultEl.attr('data-searchurl');
			//on first pageload do a query
			__.onHashChange();
		}

	};
	/**
	* @returns {Promise}
	**/
	__.search = function(searchUrl) {
		//TODO: Ladebalken einblenden??
		__.pending=true;
		return AJAX.getContent(searchUrl).then(function(data) {
			var $el = jQuery(data);
			//hide some unneccessary information inside the html
			$el.find(".dropdown-search-sort").hide(); //hide sort filters
			//add tracking information to html (there already is some tracking data there (can we reuse it?))
			$el.find("a[data-tracking]").each(function() {
				var $this = jQuery(this);
				$this.attr("data-tracking-link", $this.attr("data-tracking"));
				$this.removeAttr("data-tracking");
			});
			__.$SearchResultEl.html($el);

		}, function(err) {
			console.log("GSA Ajax Error:" + err.message);
			//display generic error message
			__.$SearchResultEl.html("<div class='nm-error'>" + __.$SearchResultEl.attr('data-errormessage') + "</div>");
		}).then(function() {
			__.pending = false;
		});
	};


	__.addEvents = function() {
		//TODO: how to make back button work with our ajax??
		//add click handlers to all links that trigger a new search
		__.legacyEventBus.on('click', 'a[data-gsa]', __.handleNewSearchClick);
		__.eventBus.on(EVENTS.HASH_CHANGE, __.onHashChange);
	};

	__.handleNewSearchClick = function(event_) {
		event_.preventDefault();
		var getParams = jQuery(this).attr('data-gsa');

		//TODO: some get params are duplicated (in __.baseSearchURL and getParams ) fix??
		var searchUrl = __.baseSearchURL + getParams;
		__.search(searchUrl);
	};

	__.onHashChange = function() {
		var searchQueryStr = exports.getSearchQueryString();
		var searchUrl = __.baseSearchURL + "&q=" + searchQueryStr;
		if (!!searchQueryStr) {
			__.search(searchUrl);
		}
	};
	/**
	 * return current search string from url
	 */
	exports.getSearchQueryString = function(window_) {
		var win = window_ || window;
		var splittedHash = win.location.hash.replace("#", "").replace(/</g, "").replace(/>/g, "").split("&");
		var searchQueryStr = null;
		for (var i = 0; i < splittedHash.length; i++) {
			if (splittedHash[i].search("search=") === 0) {
				searchQueryStr = splittedHash[i].replace("search=", "");
			}
		}
		return searchQueryStr;
	};
	/**
	 * check if results are still loading
	 */
	exports.hasPendingResults = function() {
		return __.pending;
	};

	exports.initializePromise = function(eventBus_) {
		return new Promise(function(resolve) {
			__.eventBus = eventBus_;
			__.legacyEventBus = jQuery('body');
			__.initialize();
			resolve("module/gsa-search.js");
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 83:
/*!**************************************************!*\
  !*** ./js/app/tracking/events/click-tracking.js ***!
  \**************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! jquery */ 1),
	__webpack_require__(/*! utils/dom */ 2),
	__webpack_require__(/*! tracking/apis/dtm-api */ 21),
	__webpack_require__(/*! tracking/objects/event-object */ 22),
	__webpack_require__(/*! module/audicode */ 30),
	__webpack_require__(/*! utils/polling */ 17)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(jQuery, DOM_UTILS, DTM_API, EVENT_OBJ, AUDICODE,POLLING) {//eslint-disable-line max-params
	'use strict';
	var __ = {},
		exports = {
			__: __
		};

	__.oDefaults = {
		'pollTime': 2000
	};
	/**
	 * add events
	 * @return {void}
	 */
	__.addEvents = function() {
		__.legacyEventBus.off('click.link-tracking', 'a', __.handlerTrackLink);
		__.legacyEventBus.on('click.link-tracking', 'a', __.handlerTrackLink);
	};
	/**
	 * extract event name from domElement
	 * @param {Element} domElement - the DOM element to retrieve the name from
	 * @return {String} - the event name
	 */
	__.getEventName = function(domElement) {
		var eventName = '';
		if (domElement !== null) {
			eventName = domElement.innerText;
			if (eventName === '' && domElement.getAttribute('title')) {
				eventName = domElement.getAttribute('title');
			}
		}
		return eventName;
	};
	/**
	 * extract event type from domElment
	 * @param {Element} domElement - the DOM element to retrieve the type from
	 * @return {String} - the event type (module name ot the containing module)
	 */
	__.getEventType = function(domElement) {
		var eventType = "";
		var element = domElement;

		if (element !== null) {
			while (element.parentNode) {
				element = element.parentNode;
				if (element && element.nodeType === 1 && element.hasAttribute("data-module") === true) {
					eventType = element.getAttribute("data-module");
				}
				if (eventType && eventType !== '') {
					break;
				}
			}
		}
		return eventType;
	};
	/**
	 * extract event attributes from domElement
	 * @param {Element} domElement - the DOM element to retrieve the type from
	 * @return {Object} - the element attributes within one object
	 */
	__.getEventAttributes = function(domElement) {
		var eventAttributes = {};
		var href = '';
		if (domElement !== null) {
			href = domElement.getAttribute("href");
			if (href) {
				eventAttributes.href = href;
			}
		}
		return eventAttributes;
	};
	/**
	 * check whether link is PDF link
	 * @param {Element} domElement the link element to check
	 * @return {boolean} true if it is a PDF link, false else
	 */
	__.isNewPdfServiceLink = function(domElement) {
		var toReturn = false;
		if (domElement !== null) {
			toReturn = domElement.classList.contains('j-pdf-configuration');
		}
		return toReturn;
	};
	/**
	 * check whether link is PDF link
	 * @param {Element} domElement the link element to check
	 * @return {boolean} true if it is a PDF link, false else
	 */
	__.isOldPdfServiceLink = function(domElement) {
		var toReturn = false;
		if (domElement !== null) {
			toReturn = domElement.classList.contains('nm-configuration-print');
		}
		return toReturn;
	};
	/**
	 * check whether link is download link
	 * @param {Element} domElement the link element to check
	 * @return {boolean} true if it is a download link, false else
	 */
	__.getDownloadLink = function(domElement) {
		var toReturn = false;

		if (domElement !== null) {
			if (domElement.getAttribute('download') !== null) {
				toReturn = domElement.getAttribute('download');
			} else if (__.isDownloadURL(__.getLinkHref(domElement))) {
				toReturn = __.getLinkHref(domElement);
			}
		}
		return toReturn;
	};
	/**
	 * is the given link an ave link
	 * @param {Element} domElement - the dom element to check
	 * @return {boolean} true if it is an ave download link, false else
	 */
	__.isAVEDownloadLink = function(domElement) {
		var toReturn = false;
		if (domElement !== null) {
			toReturn = domElement.classList.contains('download-button');
		}
		return toReturn;
	};
	/**
	 * get href attribute of link
	 * @param {Element} domElement the link element to check
	 * @return {String} the href attribute
	 */
	__.getLinkHref = function(domElement) {
		var href = '';
		if (domElement !== null) {
			href = domElement.getAttribute('href');
		}
		return href;
	};
	/**
	 * get pdf href
	 * @param {Element} targetHyperlink the link element to check
	 * @param {String} audicode - the audicode of the current configuration
	 * @returns {String} the href attribute or the pdf link of the new pdf service
	 */
	__.getPDFLinkHref = function(targetHyperlink, audicode) {
		var href = __.getLinkHref(targetHyperlink);
		if (href === '#') {
			return SETUPS.get("nemo.pdf.url") + "/audicode/" + audicode;
		}
		return href;
	};
	/**
	 * check whether the href of this link has a pdf or zip ending
	 * @param {String} href - the string to check
	 * @return {boolean} true, in case it has a matching ending, false else
	 */
	__.isDownloadURL = function(href) {
		var toReturn = false;
		var fileEnding;
		var filenameParts = (href||'').split('.');

		if (filenameParts && filenameParts[filenameParts.length-1]) {
			fileEnding = filenameParts[filenameParts.length-1].toUpperCase();

			if (fileEnding === 'ZIP' || fileEnding === 'PDF') {
				toReturn = true;
			}
		}
		return toReturn;
	};
	/**
	 * get file type from file name
	 * @param {String} downloadFilename - the file name
	 * @return {String} file type
	 */
	__.extractFileType = function(downloadFilename) {
		var filenameParts = downloadFilename.split('.');
		var fileEnding = filenameParts[filenameParts.length-1];
		return fileEnding.toUpperCase();
	};
	/**
	 * get file name from a url
	 * @param {Element} targetHyperlink - the hyperlink
	 * @return {String} file type
	 */
	__.extractFilename = function(targetHyperlink) {
		var href = (!!targetHyperlink && !!targetHyperlink.href) ? targetHyperlink.href : '';
		var pathParts = href.split('/');
		var fileNameWithEnding = pathParts[pathParts.length-1];
		var filenameParts = fileNameWithEnding.split('.');
		return filenameParts[filenameParts.length-2];
	};
	/**
	 * check whether the href is an external link or not
	 * @param {String} href - the href target
	 * @return {boolean} true, if external, false else
	 */
	__.isExternalDestination = function(href) {
		if (!!href && (href.indexOf("http") === 0 || href.indexOf("//") === 0)) {
			return true;
		}
		return false;
	};
	/**
	 * get the domain name from an URL (everything from between // and the next /)
	 * @param {String} href - the URL
	 * @return {String} the domain name
	 */
	__.getDomainFromURL = function(href) {
		var domain = '';
		var splitHref = href.split('/');

		if (__.isExternalDestination(href) && splitHref.length > 2) {
			domain = splitHref[2];
		}
		return domain;
	};
	/**
	 * check, whether a domain name is an Audi domain
	 * (i.e. audi occurrence in domain, not subdomain
	 * or second level, in case first level is co or com)
	 * @param {String} domain - the domain
	 * @returns {boolean} - true, if it is an Audi domain, false else
	 */
	__.isAudiDomain = function(domain) {
		var domainParts = domain.split('.');
		var sld = domainParts[domainParts.length-2];
		var domainName;

		if (sld === 'co' || sld === 'com') {
			domainName = domainParts[domainParts.length-3];
		} else {
			domainName = domainParts[domainParts.length-2];
		}

		if (domainName.indexOf('audi') !== -1) {
			return true;
		}
		return false;
	};
	/**
	 * check whether the href is an exit link
	 * i.e. an external destination and not related to an Audi domain
	 * @param {String} href - the href to check
	 * @returns {boolean} true, in case it is an exit link, false else
	 */
	__.isExitLink = function(href) {
		var domain = __.getDomainFromURL(href);

		if (__.isExternalDestination(href) && !__.isAudiDomain(domain)) {
			return true;
		}
		return false;
	};
	/**
	 * click handler which triggers the click tracking
	 * @param {Event} event - the click event
	 * @return {void}
	 */
	__.handlerTrackLink = function(event) {
		var targetHyperlink = DOM_UTILS.closest(event.target, 'a');
		var eventName = __.getEventName(targetHyperlink);
		var eventType = __.getEventType(targetHyperlink);
		var eventAttributes = __.getEventAttributes(targetHyperlink);
		var downloadLink = __.getDownloadLink(targetHyperlink);
		var fileName = __.extractFilename(targetHyperlink);
		var href = targetHyperlink.getAttribute("href");
		var audicode;

		if (__.isNewPdfServiceLink(targetHyperlink)) {
			event.preventDefault();
		}

		return new Promise(function(resolve) {
			if (__.isNewPdfServiceLink(targetHyperlink)) {
				POLLING.wait(AUDICODE.getAudicode, __.oDefaults.pollTime).then(function() {
					audicode=AUDICODE.getAudicode();
					EVENT_OBJ.getData({}, 'click', eventName, eventType, eventAttributes).
					then(function(dataObj) {
						return EVENT_OBJ.getData(dataObj, 'PDF download', 'Configuration PDF-Service-Download (v.2017)', 'download', {'url':__.getPDFLinkHref(targetHyperlink, audicode)});
					}).
					then(function(dataObj) {
						return EVENT_OBJ.getData(dataObj, 'config_save', '', 'car', {'audicode':audicode,'target':'PDF'});
					}).
					then(DTM_API.sendData).then(resolve).
					catch(function(err) {
						console.log("click tracking error (pdf): " + err);
					});
				});
			} else if (__.isOldPdfServiceLink(targetHyperlink)) {
					EVENT_OBJ.getData({}, 'click', eventName, eventType, eventAttributes).
					then(function(dataObj) {
						return EVENT_OBJ.getData(dataObj, 'PDF download', 'Configuration PDF-Service-Download (old)', 'download', {'url':__.getLinkHref(targetHyperlink)});
					}).
					then(function(dataObj) {
						return EVENT_OBJ.getData(dataObj, 'config_save', '', 'car', {'target':'PDF'});
					}).
					then(DTM_API.sendData).then(resolve).
					catch(function(err) {
						console.log("click tracking error (pdf): " + err);
					});
			} else if (downloadLink) {
				if (__.isExitLink(href)) {
					EVENT_OBJ.getData({}, 'click', eventName, eventType, eventAttributes).
						then(function(dataObj) {
							return EVENT_OBJ.getData(dataObj, 'exit_link', eventName, eventType, eventAttributes);
						}).
						then(function(dataObj) {
							return EVENT_OBJ.getData(dataObj, __.extractFileType(downloadLink)+' download', fileName, 'download', {'url':__.getLinkHref(targetHyperlink)});
						}).
						then(DTM_API.sendData).then(resolve).
						catch(function(err) {
							console.log("click tracking error (download): " + err);
						});
				} else {
					EVENT_OBJ.getData({}, 'click', eventName, eventType, eventAttributes).
						then(function(dataObj) {
							return EVENT_OBJ.getData(dataObj, __.extractFileType(downloadLink)+' download', fileName, 'download', {'url':__.getLinkHref(targetHyperlink)});
						}).
						then(DTM_API.sendData).then(resolve).
						catch(function(err) {
							console.log("click tracking error (download): " + err);
						});
				}
			} else if (__.isAVEDownloadLink(targetHyperlink)) {
				if (__.isExitLink(href)) {
					EVENT_OBJ.getData({}, 'click', eventName, eventType, eventAttributes).
						then(function(dataObj) {
							return EVENT_OBJ.getData(dataObj, 'exit_link', eventName, eventType, eventAttributes);
						}).
						then(function(dataObj) {
							return EVENT_OBJ.getData(dataObj,'PNG download', '3D Rendering Layer Download', 'download', {'url':__.getLinkHref(targetHyperlink)});
						}).
						then(DTM_API.sendData).then(resolve).
						catch(function(err) {
							console.log("click tracking error (ave): " + err);
						});
				} else {
					EVENT_OBJ.getData({}, 'click', eventName, eventType, eventAttributes).
						then(function(dataObj) {
							return EVENT_OBJ.getData(dataObj,'PNG download', '3D Rendering Layer Download', 'download', {'url':__.getLinkHref(targetHyperlink)});
						}).
						then(DTM_API.sendData).then(resolve).
						catch(function(err) {
							console.log("click tracking error (ave): " + err);
						});
				}
			} else {
				if (__.isExitLink(href)) {
					EVENT_OBJ.getData({}, 'click', eventName, eventType, eventAttributes).
						then(function(dataObj) {
							return EVENT_OBJ.getData(dataObj, 'exit_link', eventName, eventType, eventAttributes);
						}).
						then(DTM_API.sendData).then(resolve).
						catch(function(err) {
							console.log("click tracking error: " + err);
						});
				} else {
					EVENT_OBJ.getData({}, 'click', eventName, eventType, eventAttributes).
						then(DTM_API.sendData).then(resolve).
						catch(function(err) {
							console.log("click tracking error: " + err);
						});
				}
			}
		});
	};
	/**
	 * public initialization method
	 * @return {void}
	 */
	exports.initializePromise = function() {
		return new Promise(function(resolve) {
			__.legacyEventBus = jQuery("body");
			__.addEvents();
			resolve('tracking/events/click-tracking.js');
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 84:
/*!*************************************************!*\
  !*** ./js/app/tracking/events/page-tracking.js ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! configurator/dpu-api */ 3),
	__webpack_require__(/*! utils/polling */ 17),
	__webpack_require__(/*! tracking/apis/dtm-api */ 21),
	__webpack_require__(/*! tracking/objects/event-object */ 22),
	__webpack_require__(/*! tracking/objects/page-object */ 85),
	__webpack_require__(/*! tracking/objects/user-object */ 41),
	__webpack_require__(/*! tracking/objects/product-object */ 63),
	__webpack_require__(/*! tracking/objects/cart-object */ 86)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(EVENTS, DPU_API, POLLING, DTM_API, EVENT_OBJ, PAGE_OBJ, USER_OBJ, PRODUCT_OBJ, CART_OBJ) {//eslint-disable-line max-params
	'use strict';
	var __ = {},
		exports = {
			__: __
		};
	__.oDefaults = {
		'pollTime': 2000,
		'maxPollTime': 30000
	};
	/**
	 * add events
	 * @returns {void}
	 */
	__.addEvents = function() {
		__.eventBus.on(EVENTS.APP_INITIALIZED, __.handlerAppInitialized);
		__.eventBus.on(EVENTS.PAGE_READY, __.handlerPageReady);
	};
	/**
	 * handler for APP_INITIALIZED event
	 * @return {void}
	 */
	__.handlerAppInitialized = function() {
		__.hasAdditionalProductCartTrackingRun = false;
		// do not track here if we have a direct entry into a headless page or a layer
		if (location.hash.indexOf("page=") === -1 && location.hash.indexOf("layer=") === -1) {
			DTM_API.initDataObject();
			// send additional cart view event on summary page
			if (PAGE_OBJ.getPageType(document) === 'configurationSummary') {
				__.performPageTrackingWithCartViewEvent();
			} else {
				__.performDefaultPageTracking();
			}
		}
	};
	/**
	 * handler for PAGE_READY event
	 * note: if we have a direct layer entry on an URL with an additional headless page,
	 * we'll do no page tracking here (the required page tracking for the initial layer
	 * opening will be done with the LAYER_LOADED event of the corresponding layer)
	 * @return {void}
	 */
	__.handlerPageReady = function() {
		__.hasAdditionalProductCartTrackingRun = false;

		if (location.hash.indexOf("layer=") === -1) {

			if (DTM_API.isInitialTrackingDone() === false) {
				DTM_API.initDataObject();
			}

			if (PAGE_OBJ.getPageType(document) === 'configurationSummary') {
				__.performPageTrackingWithCartViewEvent();
			} else {
				__.performDefaultPageTracking();
			}
		}
	};
	/**
	 * perform a page tracking with an additional cart view event (for summary page)
	 * @return {void}
	 */
	__.performPageTrackingWithCartViewEvent = function() {
		POLLING.wait(DPU_API.isInitialized, __.oDefaults.pollTime).then(function() {
			EVENT_OBJ.getData({}, 'cart_view', '', 'cart', {}).
			then(function(dataObj) {
				return EVENT_OBJ.getData(dataObj, 'page_load', '', 'view', {});
			}).
			then(PAGE_OBJ.getData).
			then(USER_OBJ.getData).
			then(PRODUCT_OBJ.getData).
			then(CART_OBJ.getData).
			then(DTM_API.sendData).
			catch(function(err) {
				console.log("page-tracking error (summary): " + err);
			});
		}).catch(function() {
			EVENT_OBJ.getData({}, 'cart_view', '', 'cart', {}).
			then(function(dataObj) {
				return EVENT_OBJ.getData(dataObj, 'page_load', '', 'view', {});
			}).
			then(PAGE_OBJ.getData).
			then(USER_OBJ.getData).
			then(DTM_API.sendData).
			catch(function(err) {
				console.log("page-tracking error (summary w/o product/cart): " + err);
			});
			__.addPendingProductCartTracking();
		});
	};
	/**
	 * perform a default page tracking
	 * @return {void}
	 */
	__.performDefaultPageTracking = function() {
		POLLING.wait(DPU_API.isInitialized, __.oDefaults.pollTime).then(function() {
			EVENT_OBJ.getData({}, 'page_load', '', 'view', {}).
				then(PAGE_OBJ.getData).
				then(USER_OBJ.getData).
				then(PRODUCT_OBJ.getData).
				then(CART_OBJ.getData).
				then(DTM_API.sendData).
				catch(function(err) {
					console.log("page-tracking error: " + err);
				});
		}).catch(function() {
			EVENT_OBJ.getData({}, 'page_load', '', 'view', {'noConfData': true}).
				then(PAGE_OBJ.getData).
				then(USER_OBJ.getData).
				then(DTM_API.sendData).
				catch(function(err) {
					console.log("page-tracking error (w/o product/cart): " + err);
				});
			__.addPendingProductCartTracking();
		});
	};
	/**
	 * perform extra tracking for product and cart (only once!)
	 * @returns {void}
	 */
	__.performPendingProductCartTracking = function() {
		if (__.hasAdditionalProductCartTrackingRun === false) {
			__.hasAdditionalProductCartTrackingRun = true;
			EVENT_OBJ.getData({}, 'config_data', '', 'view', {}).
				then(PRODUCT_OBJ.getData).
				then(CART_OBJ.getData).
				then(DTM_API.sendData).
				catch(function(err) {
					console.log("page-tracking config error: " + err);
				});
		}
	};
	/**
	 * add extra tracking for product and cart
	 * @returns {void}
	 */
	__.addPendingProductCartTracking = function() {
		POLLING.wait(DPU_API.isInitialized, __.oDefaults.maxPollTime).
			then(__.performPendingProductCartTracking).
			catch(function(err) {
				console.log("page-tracking error - long polling exceeded: " + err);
			});
	};
	/**
	 * public initialize method
	 * @param {EventBus} globalEventBus - tbd
	 * @return {Promise} returns Promise
	 */
	exports.initializePromise = function(globalEventBus) {
		return new Promise(function(resolve) {
			__.eventBus = globalEventBus;
			__.addEvents();
			resolve('tracking/events/page-tracking.js');
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 85:
/*!************************************************!*\
  !*** ./js/app/tracking/objects/page-object.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! configurator/dpu-api */ 3),
	__webpack_require__(/*! module/iph */ 23),
	__webpack_require__(/*! utils/dom */ 2)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(DPU_API, IPH, DOM_UTILS) {
	'use strict';
	var __ = {},
		exports = {
			__: __
		};
	__.oDefaults = {
		'sStringProduction': 'production',
		'sStringStaging': 'staging',
		'sStringDevelopment': 'development',
		'sStringApplicationNameNeMo': 'nemo',
		'sStringApplicationNameSTCK': 'vtp 3.0',
		'sStringSiteNameNeMo': 'product portal',
		'sStringSiteNameSTCK': 'carsearch',
	};
	/**
	 * remove possible trailing ".html" from string
	 * @param {String} calculatedPagename - the input string
	 * @returns {String} calculatedPagename - string without trailing ".html"
	 */
	__.removeTrailingHtmlString = function(calculatedPagename) {
		if (calculatedPagename.indexOf('.html') > 0) {
			return calculatedPagename.substr(0, calculatedPagename.indexOf('.html'));
		}
		return calculatedPagename;
	};
	/**
	 * get page id for tracking
	 * @param {String} href_ - current href
	 * @param {String} pathname_ - current pathname
	 * @returns {String} page id
	 */
	__.getPageID = function(href_, pathname_) {
		var calculatedPagename = pathname_;
		var jslayer = false;
		if (href_ && href_.indexOf('jslayer=') > -1) {
			jslayer = href_.substr(href_.indexOf('jslayer=') + 8);

			if (href_ && href_.indexOf('page=') > -1) {
				calculatedPagename = href_.substr(href_.indexOf('page=') + 5);
			}
		} else if (href_ && href_.indexOf('layer=') > -1) {
			calculatedPagename = href_.substr(href_.indexOf('layer=') + 6);
		} else if (href_ && href_.indexOf('page=') > -1) {
			calculatedPagename = href_.substr(href_.indexOf('page=') + 5);
		}
		calculatedPagename = __.removeTrailingHtmlString(calculatedPagename);
		return jslayer ? calculatedPagename + '/' + jslayer : calculatedPagename;
	};
	/**
	 * get Page name
	 * @param {Element} domElement - the domElement to check for (optional)
	 * @return {String} - the page name
	 */
	__.getPageName = function(domElement) {
		var pageName = '';
		if (domElement && domElement.querySelectorAll('#nm-page-title') && domElement.querySelectorAll('#nm-page-title').length > 0) {
			pageName = domElement.querySelectorAll('#nm-page-title')[0].innerText;
		} else {
			pageName = document.getElementsByTagName('title')[0].innerText;
		}
		return pageName;
	};
	/**
	 * get destination URL from location object
	 * @returns {String} the destination URL
	 */
	__.getDestinationURL = function() {
		return window.location.href;
	};
	/**
	 * get the referring URL
	 * @returns {String} the referring URL
	 */
	__.getReferringURL = function() {
		return document.referrer;
	};
	/**
	 * get sys env (production / staging)
	 * @param {String} hostname - the current hostname
	 * @returns {String} production by default, staging in case of hostname
	 * contains "pre-" or "test-" or "local" or "axs" or "127.0.0.1"
	 */
	__.getSysEnv = function(hostname) {
		if (hostname.indexOf('local') !== -1 || hostname.indexOf('aem') !== -1 || hostname.indexOf('nemo') !== -1 || hostname.indexOf('127.0.0.1') !== -1) {
			return __.oDefaults.sStringDevelopment;
		} else if (hostname.indexOf('pre-') !== -1 || hostname.indexOf('test-') !== -1) {
			return __.oDefaults.sStringStaging;
		}
		return __.oDefaults.sStringProduction;
	};
	/**
	 * calculate breadCrumbs
	 * @param {String} href - current href
	 * @param {String} pathname - current pathname
	 * @returns {Array} - breadcrumbs for currently viewed page
	 */
	__.getBreadCrumbs = function(href, pathname) {
		var pageIDArray = __.getPageID(href, pathname).split('/');
		var toReturn = [];
		var j = 0;
		var i;
		for (i=0; i<pageIDArray.length; i++) {
			if (pageIDArray[i] && pageIDArray[i] !== '') {
				if (j>1) {
					toReturn.push(pageIDArray[i]);
				}
				j++;
			}
		}
		return toReturn;
	};
	/**
	 * get language from pathname
	 * @param {String} pathname - the current pathname
	 * @returns {String} the current language
	 */
	__.getLanguage = function(pathname) {
		var language;
		if (__.LocaleLanguage) {
			language = __.LocaleLanguage;
		} else {
			if (pathname.split('/')[1] === 'content') {
				language = pathname.split('/')[4];
			} else {
				language = pathname.split('/')[3];
			}
		}
		return __.removeTrailingHtmlString(language);
	};
	/**
	 * get country code from pathname
	 * @param {String} pathname - the current pathname
	 * @returns {String} the current country ISO in uppercase
	 */
	__.getCountry = function(pathname) {
		if (__.LocaleCountry) {
			return __.LocaleCountry;
		} else {
			if (pathname.split('/')[1] === 'content') {
				return pathname.split('/')[2].toUpperCase();
			} else {
				return pathname.split('/')[1].toUpperCase();
			}
		}
	};
	/**
	 * get language and country in format <ISO-3166>-<ISO-639>
	 * @param {String} pathname - the current pathname
	 * @returns {String} language and COUNTRY, e.g. de-DE
	 */
	__.getLangCountryISO = function(pathname) {
		return __.getLanguage(pathname) + '-' + __.getCountry(pathname);
	};
	/**
	 * get the application name
	 * @returns {String} application name
	 */
	__.getApplicationName = function() {
		var stockcarContext = SETUPS.get('stockcar.context');
		if (!!stockcarContext && (stockcarContext === true || stockcarContext === 'true')) {
			return __.oDefaults.sStringApplicationNameSTCK;
		} else {
			return __.oDefaults.sStringApplicationNameNeMo;
		}
	};
	/**
	 * get the site name
	 * @returns {String}Â site name
	 */
	__.getSite = function() {
		var stockcarContext = SETUPS.get('stockcar.context');
		if (!!stockcarContext && stockcarContext === true || stockcarContext === 'true') {
			return __.oDefaults.sStringSiteNameSTCK;
		} else {
			return __.oDefaults.sStringSiteNameNeMo;
		}
	};
	/**
	 * get the application version
	 * @returns {String} application version
	 */
	__.getApplicationVersion = function() {
		var versionElemArr = document.getElementsByClassName('application-version');
		if (versionElemArr.length > 0) {
			return versionElemArr[0].getAttribute("data-version");
		}
		if (document.querySelectorAll('.nm-version-info dd') && document.querySelectorAll('.nm-version-info dd').length > 0) {
			return document.querySelectorAll('.nm-version-info dd')[1].innerHTML;
		}
		return undefined;
	};
	/**
	 * get page type from domElement
	 * @param {Element} domElement - the dom element to retrieve page type from
	 * @return {String} the page type
	 */
	exports.getPageType = function(domElement) {
		var pageType = 'standardPage';
		var dataType = '';
		var dataTemplate = '';
		if (document.querySelectorAll('.nm-homepage') && document.querySelectorAll('.nm-homepage').length > 0) {
			pageType = 'homepage';
		} else if (document.querySelectorAll('#nm_mofi') && document.querySelectorAll('#nm_mofi').length > 0) {
			pageType = 'modelFinder';
		} else if (domElement && domElement.querySelectorAll && domElement.querySelectorAll('.nm-content') && domElement.querySelectorAll('.nm-content').length > 0) {
			dataType = domElement.querySelectorAll('.nm-content')[0].getAttribute('data-type');
			if (dataType && dataType === 'nemo') {
				dataTemplate = domElement.querySelectorAll('.nm-content')[0].getAttribute('data-template');
				if (dataTemplate && dataTemplate === 'home') {
					pageType = 'configurableModelHome';
				} else if (dataTemplate && dataTemplate === 'summary') {
					pageType = 'configurationSummary';
				} else {
					pageType = 'configurableModel';
				}
			}
		}
		return pageType;
	};
	/**
	 * retrieve model year from setups
	 * @return {String} the model year if available - empty string else
	 */
	__.getModelYear = function() {
		return DPU_API.getModelYear();
	};
	/**
	 * retrive the model line from meta tag if existent
	 * @return {String} the carline group if available - false else
	 */
	__.getModelLine = function() {
		var carlineGroupTag = DOM_UTILS.getElement('meta[name=carlinegroup]', document);
		if (DOM_UTILS.isElement(carlineGroupTag)) {
			return carlineGroupTag.getAttribute('content');
		}
		return false;
	};
	__.extractDealerIdFromDOM = function() {
		var dealerIdElem = DOM_UTILS.getElement('[data-dealer-id]', document);
		return dealerIdElem.getAttribute('data-dealer-id');
	};
	/**
	 * get page object
	 * @param {Object} dataObject - the the base tracking object
	 * @return {Object} the page object
	 */
	exports.getData = function(dataObject) {
		return new Promise(function(resolve) {
			var pageObject;
			var iphBNR = IPH.inIPHMode();
			var scBNR = __.extractDealerIdFromDOM();
			__.LocaleLanguage = SETUPS.get('LocaleLanguage') ? SETUPS.get('LocaleLanguage') : null;
			__.LocaleCountry = SETUPS.get('LocaleCountry') ? SETUPS.get('LocaleCountry') : null;
			pageObject = {
					pageInfo: {
						pageID: __.getPageID(window.location.href, window.location.pathname),
						pageName: __.getPageName(document),
						destinationURL: __.getDestinationURL(),
						referringURL: __.getReferringURL(),
						sysEnv: __.getSysEnv(window.location.host),
						breadCrumbs: __.getBreadCrumbs(window.location.href, window.location.pathname),
						language: __.getLangCountryISO(window.location.pathname)
					},
					category: {
						pageType: exports.getPageType(document)
					},
					attributes: {
						applicationName: __.getApplicationName(),
						applicationVersion: __.getApplicationVersion(),
						implementer: 'BaD',
						site: __.getSite()

					}
			};
			if (__.getModelYear()) {
				pageObject.attributes.modelYear = __.getModelYear();
			}
			if (iphBNR) {
				pageObject.attributes.dealerID = iphBNR;
			} else if (!!scBNR && scBNR !== '') {
				pageObject.attributes.dealerID = scBNR;
			}
			if (__.getModelLine()) {
				pageObject.attributes.modelLine = __.getModelLine();
			}
			dataObject.page = pageObject;
			resolve(dataObject);
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 86:
/*!************************************************!*\
  !*** ./js/app/tracking/objects/cart-object.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! configurator/dpu-api */ 3),
	__webpack_require__(/*! utils/polling */ 17),
	__webpack_require__(/*! utils/format */ 87),
	__webpack_require__(/*! tracking/objects/product-object */ 63)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(DPU_API, POLLING, FORMAT, PRODUCT_OBJ) {
	'use strict';
	var __ = {},
		exports = {
			__: __
		};
	__.oDefaults = {
			'pollTime': 2000
	};
	/**
	 * get one cart item object
	 * @param {Object} dpuItem - the dpu item
	 * @param {Object} families - the family object
	 * @returns {Object} cart item object
	 */
	__.getCartItem = function(dpuItem, families) {
		var lineType = "addon with extra charge";
		var price = 0;

		if (typeof dpuItem.price === 'undefined') {
			lineType = "addon without price";
		} else if (!!dpuItem.status && dpuItem.status[4] === '1' || dpuItem.price === 'Serie') {
			lineType = "series";
		} else {
			price = FORMAT.getRawPrice(dpuItem.price, true);

			if (price === 0) {
				lineType = "addon without extra charge";
			}
		}

		return {
			'productInfo': PRODUCT_OBJ.getProductInfo(dpuItem),
			'category': PRODUCT_OBJ.getProductCategory(dpuItem, families),
			'price': {
				'basePrice': price,
				'priceWithTax': price
			},
			'attributes': {
				'standardPrice': __.getCarlineBasePrice(),
				'lineType': lineType
			}
		};
	};
	/**
	 * get all cart item objects
	 * @returns {Array} the cart objects
	 */
	__.getCartItems = function() {
		var cartItems = DPU_API.getSelectedItems();
		var cartItemObjects = [];
		var cartItem;
		var families = DPU_API.getFamilies();

		for (cartItem in cartItems) {
			if (cartItems.hasOwnProperty(cartItem)) {
				cartItemObjects.push(__.getCartItem(cartItems[cartItem], families));
			}
		}
		return cartItemObjects;
	};
	/**
	 * read price of current model with smallest engine an without any addons from SETUPS
	 * @returns {int} price of smallest engine or 0 if not in SETUPS
	 */
	__.getCarlineBasePrice = function() {
		return SETUPS.get('nemo.CarlineBasePriceRaw') ? parseInt(SETUPS.get('nemo.CarlineBasePriceRaw'), 10) : 0;
	};
	/**
	 * get the cart data
	 * @returns {Object} the cart data
	 */
	__.getCartData = function() {
		var prices = DPU_API.getPrices();
		var priceWithTax;
		var cartTotal;
		// overall configuration without taxes
		var basePrice;
		if (prices.nettoBaseRaw && prices.nettoBaseRaw !== 0) {
			basePrice = parseInt(prices.nettoBaseRaw, 10) + parseInt(prices.nettoOptionsRaw, 10);
		} else {
			basePrice = (prices.modelRaw && prices.optionsRaw) ? (parseInt(prices.modelRaw, 10) + parseInt(prices.optionsRaw, 10)) : "";
		}
		// basePrice + tax
		priceWithTax = (prices.modelRaw && prices.optionsRaw) ? parseInt(prices.modelRaw, 10) + parseInt(prices.optionsRaw, 10) : "";
		// total price including shipping etc.
		if (prices.rotrRaw && prices.rotrRaw !== 0) {
			cartTotal = prices.rotrRaw;
		} else {
			cartTotal = prices.totalRaw ? prices.totalRaw : "";
		}
		return {
			'cartID': DPU_API.getConfigurationId(),
			'price': {
				'basePrice': basePrice,
				'currency': prices.total ? prices.total.split(" ").pop() : "",
				'priceWithTax': priceWithTax,
				'cartTotal': cartTotal,
				// price of current model with smallest engine and without any addons
				'carlineBasePrice': __.getCarlineBasePrice(),
				// price of current model with current engine and without any addons
				'engineBasePrice': prices.modelRaw ? prices.modelRaw : ""
			},
			item: __.getCartItems()
		};
	};
	/**
	 * get cart object
	 * @param {Object} dataObject - the the base tracking object
	 * @return {Promise} the cart object wrapped in a promise
	 */
	exports.getData = function(dataObject) {
		return new Promise(function(resolve) {
			var returnObject = dataObject;
			if (document.getElementsByTagName("body")[0].classList.contains('nm-has-basket')) {
				POLLING.wait(DPU_API.isInitialized, __.oDefaults.pollTime).then(function() {
					returnObject.cart = __.getCartData();
					resolve(returnObject);
				}).catch(function() {
					resolve(returnObject);
				});
			} else {
				resolve(returnObject);
			}
		});
	};
	/**
	 * get conflict attributes in the correct form for a conflict event
	 * @param {Object} conflicts - the conflicts object from the DPU
	 * @return {Object} the conflict attributes
	 */
	exports.getConflictAttributes = function(conflicts) {
		var conflictAttributes = {}, i, j, triggerLen, solutionLen;
		if (conflicts && conflicts.triggers && conflicts.solutions) {
			conflictAttributes.existingItems = [];
			for (i = 0, triggerLen = conflicts.triggers.length; i < triggerLen; i++) {
				conflictAttributes.existingItems.push(conflicts.triggers[i].id);
			}
			conflictAttributes.changedItems = [];
			for (j = 0, solutionLen = conflicts.solutions.length; j < solutionLen; j++) {
				conflictAttributes.changedItems.push(conflicts.solutions[j].id);
			}
		}
		return conflictAttributes;
	};
	/**
	 * check whether current configuration conflict resolution suggestion was just aborted
	 * @param {Object} configuration - the configuration to check
	 * @return {boolean} true if it was just aborted, false else
	 */
	exports.isConfigurationAborted = function(configuration) {
		var configHistoryArr;
		var configHistory = (configuration && configuration.configHistory) ? configuration.configHistory.trim() : false;
		if (configHistory) {
			configHistoryArr = configHistory.split(" ");
			if (configHistoryArr.length > 0 && configHistoryArr[configHistoryArr.length - 1] === 'abort')	{
				return true;
			}
		}
		return false;
	};
	/**
	 * check whether current configuration conflict resolution suggestion was just accepted
	 * @param {Object} configuration - the configuration to check
	 * @return {Array} of pre-parsed items if applicable, false else
	 */
	exports.isConfigurationAccepted = function(configuration) {
		var configHistoryArr;
		var configHistory = (configuration && configuration.configHistory) ? configuration.configHistory.trim() : false;
		var solutionString;
		if (configHistory) {
			configHistoryArr = configHistory.split(" ");
			if (configHistoryArr.length > 1 && configHistoryArr[configHistoryArr.length - 1] === 'accept')	{
				solutionString = configHistoryArr[configHistoryArr.length - 2].substr(1, configHistoryArr[configHistoryArr.length - 2].length-2);
				return solutionString.split(';');
			}
		}
		return false;
	};
	/**
	 * get an array of ids of a proposed solution (pre-parsed in an array)
	 * @param {Array} solutionArr - the pre-parsed solution array
	 * @return {Array} ids of proposed solution
	 */
	exports.getSolutionItems = function(solutionArr) {
		return exports.getSolutionAddedItems(solutionArr).concat(exports.getSolutionRemovedItems(solutionArr));
	};
	/**
	 * get an array of ids of all added elements of a proposed solution (pre-parsed in an array)
	 * @param {Array} solutionArr - the pre-parsed solution array
	 * @return {Array} ids of added elements in a proposed solution
	 */
	exports.getSolutionAddedItems = function(solutionArr) {
		var addedItems = [];
		var i, len;

		for (i=0, len=solutionArr.length; i<len; i++) {
			if (solutionArr[i].substr(1,1) === '+') {
				addedItems.push(solutionArr[i].substr(2));
			}
		}
		return addedItems;
	};
	/**
	 * get an array of ids of all removed elements of a proposed solution (pre-parsed in an array)
	 * @param {Array} solutionArr - the pre-parsed solution array
	 * @return {Array} ids of removed elements in a proposed solution
	 */
	exports.getSolutionRemovedItems = function(solutionArr) {
		var removedItems = [];
		var i, len;

		for (i=0, len=solutionArr.length; i<len; i++) {
			if (solutionArr[i].substr(1,1) === '-') {
				removedItems.push(solutionArr[i].substr(2));
			}
		}
		return removedItems;
	};
	/**
	 * retrieve the last action's type from a configuration
	 * @param {Object} configuration - the configuration to check
	 * @return {String} - the last action string (+ or -) or false, in case there is no config history
	 */
	exports.getLastActionType = function(configuration) {
		var configHistoryArr;
		var configHistory = (configuration && configuration.configHistory) ? configuration.configHistory.trim() : false;

		if (configHistory) {
			configHistoryArr = configHistory.split(" ");
			if (configHistoryArr.length > 0)	{
				return configHistoryArr[configHistoryArr.length - 1].substr(0, 1);
			}
		}
		return false;
	};
	/**
	 * retrieve the id of the last item changed through an atomar action (add/remove a single item, not through a conflict)
	 * @param {Object} configuration - the configuration to check
	 * @return {String} the id of the last item, false else
	 */
	exports.getLastItemForAtomarAction = function(configuration) {
		var configHistoryArr;
		var configHistory = (configuration && configuration.configHistory) ? configuration.configHistory.trim() : false;

		if (configHistory) {
			configHistoryArr = configHistory.split(" ");
			if (configHistoryArr.length > 0)	{
				return configHistoryArr[configHistoryArr.length - 1].substr(1);
			}
		}
		return false;
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 87:
/*!********************************!*\
  !*** ./js/app/utils/format.js ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	"use strict";
	var __ = {},
		exports = {
			__: __
		};
	/**
	 * get the raw price from a formatted string
	 * @param {String} price - the formatted price
	 * @param {boolean} returnIntValue - whether price shall be parsed as int - else parsed as float
	 * @return {int} - the raw price as int
	 */
	exports.getRawPrice = function(price, returnIntValue) {
		var priceRaw;
		var currencyRemoveRegex;
		var getCurrencySeparatorsRegEx = /[,]/g;
		if (SETUPS.get('commaseparator.scope') === 0 || SETUPS.get('commaseparator.scope') === '0') {
			currencyRemoveRegex = /[^0-9,]/g;
		} else {
			currencyRemoveRegex = /[^0-9.]/g;
		}
		priceRaw = price.replace(currencyRemoveRegex, "");
		priceRaw.replace(getCurrencySeparatorsRegEx, ".");
		if (returnIntValue === true) {
			priceRaw = parseInt(priceRaw, 10);
		} else {
			priceRaw = parseFloat(priceRaw);
		}
		if (isNaN(priceRaw)) {
			priceRaw = 0;
		}
		return priceRaw;
	};
	/**
	 * converts number format from 1,000.00 to 1.000,00
	 * @param {Number} number_ - Number to convert
	 * @returns {Number} - returns converted number
	 */
	exports.convertNumberFormat = function(number_) {
		var ret = parseFloat(number_),
			x, x1, x2, rgx;
		ret = ret.toFixed(2) + '';
		ret = ret.replace('.', ',');
		x = ret.split(',');
		x1 = x[0];
		x2 = x.length > 1 ? ',' + x[1] : '';
		rgx = /(\d+)(\d{3})/;
		while (rgx.test(x1)) {
			x1 = x1.replace(rgx, '$1' + '.' + '$2'); //eslint-disable-line no-useless-concat
		}
		ret = x1 + x2;
		return ret;
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 88:
/*!**************************************************!*\
  !*** ./js/app/tracking/events/layer-tracking.js ***!
  \**************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! configurator/dpu-api */ 3),
	__webpack_require__(/*! utils/dom */ 2),
	__webpack_require__(/*! utils/polling */ 17),
	__webpack_require__(/*! tracking/apis/dtm-api */ 21),
	__webpack_require__(/*! tracking/objects/event-object */ 22),
	__webpack_require__(/*! tracking/objects/page-object */ 85),
	__webpack_require__(/*! tracking/objects/user-object */ 41),
	__webpack_require__(/*! tracking/objects/product-object */ 63),
	__webpack_require__(/*! tracking/objects/cart-object */ 86),
	__webpack_require__(/*! module/audicode */ 30)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(EVENTS, DPU_API, DOM_UTILS, POLLING, DTM_API, EVENT_OBJ, PAGE_OBJ, USER_OBJ, PRODUCT_OBJ, CART_OBJ, AUDICODE) {//eslint-disable-line max-params
	'use strict';
	var __ = {},
		exports = {
			__: __
		};
	__.oDefaults = {
			'pollTime': 2000,
			'maxPollTime': 30000
	};
	/**
	 * add events
	 * @returns {void}
	 */
	__.addEvents = function() {
		__.eventBus.on(EVENTS.LAYER_LOADED, __.handlerLayerLoaded);
		__.eventBus.on(EVENTS.LAYER_CLOSED, __.handlerLayerClosed);
	};
	/**
	 * patch data object for conflict tracking
	 * @param {Object} dataObject - data object
	 * @returns {Promise} resolving with patched data object
	 */
	__.patchPageInfoWithConflict = function(dataObject) {
		return new Promise(function(resolve) {
			dataObject.page.pageInfo.pageID += '/conflict';
			dataObject.page.pageInfo.pageName += ' > Conflict';
			resolve(dataObject);
		});
	};
	/**
	 * handler for LAYER_LOADED event
	 * @param {Element} domElement - domElement of the layer
	 * @return {void}
	 */
	__.handlerLayerLoaded = function(domElement) {
		var conflicts = DPU_API.getConflicts();
		var attributes;
		var audicodeFromDpuResponse;
		var configurationStartType;
		var audicodeFieldOnPage = !!domElement && !!domElement.element ? __.isAudicodeFieldOnPage(domElement.element) : false;

		// normal layer tracking, in case we do not have a direct layer call
		if (DTM_API.isInitialTrackingDone() === true) {
			// add conflict event to layer tracking
			if (conflicts) {
				EVENT_OBJ.getData({}, 'layer_show', '', 'view', {}).
					then(function(dataObj) {
						return EVENT_OBJ.getData(dataObj, 'cart_conflict', '', 'cart', CART_OBJ.getConflictAttributes(conflicts));
					}).
					then(PAGE_OBJ.getData).
					then(__.patchPageInfoWithConflict).
					then(USER_OBJ.getData).
					then(PRODUCT_OBJ.getData).
					then(CART_OBJ.getData).
					then(DTM_API.sendData).
					catch(function(err) {
						console.log("layer-tracking error (conflict): " + err);
					});
			}
			// add config start event to layer tracking
			else if (__.isConfigStartLayer(domElement)) {
				configurationStartType = DPU_API.getConfigurationStartType();
				attributes = {
					'configurationID': DPU_API.getConfigurationId(),
					'configurationStartType': EVENT_OBJ.getTrackingConfigurationStartType(configurationStartType),
					'source': EVENT_OBJ.getTrackingSource(configurationStartType)
				};
				// enrich config start event attributes with audicode if config starts from audicode action
				if (configurationStartType && configurationStartType.indexOf('audicode') !== -1) {
					audicodeFromDpuResponse = DPU_API.getAudicode();
					if (audicodeFromDpuResponse) {
						attributes.audicode = audicodeFromDpuResponse;
					}
					EVENT_OBJ.getData({}, 'layer_show', '', 'view', {}).
						then(function(dataObj) {
							return EVENT_OBJ.getData(dataObj, 'config_start', '', 'car', attributes);
						}).
						then(PAGE_OBJ.getData).
						then(USER_OBJ.getData).
						then(PRODUCT_OBJ.getData).
						then(CART_OBJ.getData).
						then(DTM_API.sendData).
						catch(function(err) {
							console.log("layer-tracking error (config start audicode): " + err);
						});
				} else {
					EVENT_OBJ.getData({}, 'layer_show', '', 'view', {}).
						then(function(dataObj) {
							return EVENT_OBJ.getData(dataObj, 'config_start', '', 'car', attributes);
						}).
						then(PAGE_OBJ.getData).
						then(USER_OBJ.getData).
						then(PRODUCT_OBJ.getData).
						then(CART_OBJ.getData).
						then(DTM_API.sendData).
						catch(function(err) {
							console.log("layer-tracking error (config start): " + err);
						});
				}
			}
			// check whether it is an audicode layer
			else if (audicodeFieldOnPage) {
				// poll for audicode loaded
				POLLING.wait(AUDICODE.getAudicode, __.oDefaults.pollTime).
					then(function(audicode) {
						attributes = {
							'audicode': audicode,
							'target': 'layer'
						};
						EVENT_OBJ.getData({}, 'layer_show', '', 'view', {}).
						then(function(dataObj) {
							return EVENT_OBJ.getData(dataObj, 'config_save', '', 'car', attributes);
						}).
						then(PAGE_OBJ.getData).
						then(USER_OBJ.getData).
						then(PRODUCT_OBJ.getData).
						then(CART_OBJ.getData).
						then(DTM_API.sendData).
						catch(function(err) {
							console.log("layer-tracking error (audicode layer): " + err);
						});
					}).
					catch(function(err) {
						console.log("layer-tracking error (audicode field): " + err);
					});
			}
			// default layer tracking
			else {
				EVENT_OBJ.getData({}, 'layer_show', '', 'view', {}).
					then(PAGE_OBJ.getData).
					then(USER_OBJ.getData).
					then(PRODUCT_OBJ.getData).
					then(CART_OBJ.getData).
					then(DTM_API.sendData).
					catch(function(err) {
						console.log("layer-tracking error: " + err);
					});
			}
		}
		// do a page_load tracking for a direct layer call
		else if (location.hash.indexOf("layer=") !== -1) {
			DTM_API.initDataObject();
			POLLING.wait(DPU_API.isInitialized, __.oDefaults.pollTime).then(function() {
				EVENT_OBJ.getData({}, 'page_load', '', 'view', {}).
					then(PAGE_OBJ.getData).
					then(USER_OBJ.getData).
					then(PRODUCT_OBJ.getData).
					then(CART_OBJ.getData).
					then(DTM_API.sendData).
					catch(function(err) {
						console.log("layer-tracking error (direct entry): " + err);
					});
			}).catch(function() {
				EVENT_OBJ.getData({}, 'page_load', '', 'view', {}).
				then(PAGE_OBJ.getData).
				then(USER_OBJ.getData).
				then(DTM_API.sendData).
				catch(function(err) {
					console.log("layer-tracking error (w/o product/cart): " + err);
				});
				__.addPendingProductCartTracking();
			});
		}
	};
	/**
	 * perform extra tracking for product and cart (only once!)
	 * @returns {void}
	 */
	__.performPendingProductCartTracking = function() {
		if (__.hasAdditionalProductCartTrackingRun === false) {
			__.hasAdditionalProductCartTrackingRun = true;
			EVENT_OBJ.getData({}, 'config_data', '', 'view', {}).
				then(PRODUCT_OBJ.getData).
				then(CART_OBJ.getData).
				then(DTM_API.sendData).
				catch(function(err) {
					console.log("layer-tracking config error: " + err);
				});
		}
	};
	/**
	 * add extra tracking for product and cart
	 * @returns {void}
	 */
	__.addPendingProductCartTracking = function() {
		POLLING.wait(DPU_API.isInitialized, __.oDefaults.maxPollTime).
			then(__.performPendingProductCartTracking).
			catch(function(err) {
				console.log("layer-tracking error - long polling exceeded: " + err);
			});
	};
	/**
	 * check whether audicode field is on current page
	 * @param {Element} context - the DOM context to operate on
	 * @returns {boolean} - true if present, false else
	 */
	__.isAudicodeFieldOnPage = function(context) {
		var audicodeField = DOM_UTILS.getElement('.nm-j-audicode', context);
		return DOM_UTILS.isElement(audicodeField) ? audicodeField : false;
	};
	/**
	 * check for a dom element whether it is a config start layer
	 * @param {Object} data - the event payload
	 * @return {boolean} true in case it is a config start layer, false else
	 */
	__.isConfigStartLayer = function(data) {
		var isImplicitConfigStart = false;
		var isExplicitConfigStart = false;
		if (data && data.element && data.element.querySelectorAll) {
			isImplicitConfigStart = data.element.querySelectorAll('.nm-md-configurationstart-implicit-layer') &&
				data.element.querySelectorAll('.nm-md-configurationstart-implicit-layer').length > 0;
			isExplicitConfigStart = data.element.querySelectorAll('.nm-configurationstart-loaded-layer') &&
				data.element.querySelectorAll('.nm-configurationstart-loaded-layer').length > 0;
		}
		return isImplicitConfigStart || isExplicitConfigStart;
	};
	/**
	 * check whether domElement contains conflict layer
	 * @param {Element} domElement - domElement to check
	 * @return {boolean} true if domElement contains conflict layer false else
	 */
	__.isConflictLayer = function(domElement) {
		if (domElement && domElement.querySelectorAll && domElement.querySelectorAll('.nm-layer-conflict') && domElement.querySelectorAll('.nm-layer-conflict').length > 0) {
			return true;
		}
		return false;
	};
	/**
	 * handler for LAYER_CLOSED event
	 * note: for resolved conflicts, the tracking is done in configuration-tracking
	 * @param {Element} domElement - the layer's DOM element
	 * @return {void}
	 */
	__.handlerLayerClosed = function(domElement) {
		var configuration = DPU_API.getConfiguration();
		__.eventObject = [];

		if (CART_OBJ.isConfigurationAborted(configuration)) {
			EVENT_OBJ.getData({}, 'cart_conflict_aborted', '', 'cart', {}).
				then(function(dataObj) {
					return EVENT_OBJ.getData(dataObj, 'layer_hide', '', 'view', {});
				}).
				then(PAGE_OBJ.getData).
				then(USER_OBJ.getData).
				then(PRODUCT_OBJ.getData).
				then(CART_OBJ.getData).
				then(DTM_API.sendData).
				catch(function(err) {
					console.log("layer-tracking error (layer close conflict abort): " + err);
				});
		} else if (!__.isConflictLayer(domElement)) {
			EVENT_OBJ.getData({}, 'layer_hide', '', 'view', {}).
				then(PAGE_OBJ.getData).
				then(USER_OBJ.getData).
				then(PRODUCT_OBJ.getData).
				then(CART_OBJ.getData).
				then(DTM_API.sendData).
				catch(function(err) {
					console.log("layer-tracking error (layer close): " + err);
				});
		}
	};
	/**
	 * public initialize method
	 * @param {EventBus} globalEventBus - tbd
	 * @return {Promise} returns Promise
	 */
	exports.initializePromise = function(globalEventBus) {
		return new Promise(function(resolve) {
			__.eventBus = globalEventBus;
			__.addEvents();
			resolve('tracking/events/layer-tracking.js');
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 89:
/*!**********************************************************!*\
  !*** ./js/app/tracking/events/configuration-tracking.js ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! tracking/apis/dtm-api */ 21),
	__webpack_require__(/*! tracking/objects/event-object */ 22),
	__webpack_require__(/*! tracking/objects/page-object */ 85),
	__webpack_require__(/*! tracking/objects/user-object */ 41),
	__webpack_require__(/*! tracking/objects/product-object */ 63),
	__webpack_require__(/*! tracking/objects/cart-object */ 86),
	__webpack_require__(/*! configurator/dpu-api */ 3)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(EVENTS, DTM_API, EVENT_OBJ, PAGE_OBJ, USER_OBJ, PRODUCT_OBJ, CART_OBJ, DPU_API) {//eslint-disable-line max-params
	'use strict';
	var __ = {},
		exports = {
			__: __
		};
	/**
	 * add events
	 * @returns {void}
	 */
	__.addEvents = function() {
		__.eventBus.on(EVENTS.CONFIG_UPDATE, __.handleConfigUpdate);
	};
	/**
	 * react to config Update Event: collect Page Data
	 * and in addition push lastChangeAction (add/remove) to webAnalytics
	 * @returns {void}
	 */
	__.handleConfigUpdate = function() {
		var conflicts = DPU_API.getConflicts();
		var configuration = DPU_API.getConfiguration();
		var lastItem = CART_OBJ.getLastItemForAtomarAction(configuration);
		var solution = CART_OBJ.isConfigurationAccepted(configuration);

		// does also page tracking for configuration accept
		if (solution) {
			EVENT_OBJ.getData({}, 'layer_hide', '', 'view', {}).
				then(function(dataObj) {
					return EVENT_OBJ.getData(dataObj, 'cart_conflict_solved', '', 'cart', {'changedItems' : CART_OBJ.getSolutionItems(solution)});
				}).
				then(PAGE_OBJ.getData).
				then(USER_OBJ.getData).
				then(PRODUCT_OBJ.getData).
				then(function(dataObj) {
					return PRODUCT_OBJ.patchCartActionForProductId(dataObj, 'add', CART_OBJ.getSolutionAddedItems(solution));
				}).
				then(function(dataObj) {
					return PRODUCT_OBJ.patchCartActionForProductId(dataObj, 'remove', CART_OBJ.getSolutionRemovedItems(solution));
				}).
				then(CART_OBJ.getData).
				then(DTM_API.sendData).
				catch(function(err) {
					console.log("configuration tracking error (conflict accept): " + err);
				});
		}
		// no conflicts (will be tracked with layer_loaded)
		// no configuration abort (will be tracked with layer_hide)
		else if (!conflicts && !CART_OBJ.isConfigurationAborted(configuration)) {
			if (CART_OBJ.getLastActionType(configuration) === '+') {
				EVENT_OBJ.getData({}, 'cart_add', '', 'cart', {}).
					then(PRODUCT_OBJ.getData).
					then(function(dataObj) {
						return PRODUCT_OBJ.patchCartActionForProductId(dataObj, 'add', [lastItem]);
					}).
					then(CART_OBJ.getData).
					then(DTM_API.sendData).
					catch(function(err) {
						console.log("configuration tracking error (cart add): " + err);
					});
			} else if (CART_OBJ.getLastActionType(configuration) === '-') {
				EVENT_OBJ.getData({}, 'cart_remove', '', 'cart', {}).
					then(PRODUCT_OBJ.getData).
					then(function(dataObj) {
						return PRODUCT_OBJ.patchCartActionForProductId(dataObj, 'remove', [lastItem]);
					}).
					then(CART_OBJ.getData).
					then(DTM_API.sendData).
					catch(function(err) {
						console.log("configuration tracking error (cart remove): " + err);
					});
			} else {
				console.log("UNKNOWN ACTION for config history " + configuration.configHistory);
			}
		}
	};
	/**
	 * public initialize method
	 * @param {EventBus} globalEventBus - tbd
	 * @return {Promise} returns Promise
	 */
	exports.initializePromise = function(globalEventBus) {
		return new Promise(function(resolve) {
			__.eventBus = globalEventBus;
			__.addEvents();
			resolve('tracking/events/configuration-tracking.js');
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ 90:
/*!*******************************************************!*\
  !*** ./js/app/tracking/events/conversion-tracking.js ***!
  \*******************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	__webpack_require__(/*! events */ 0),
	__webpack_require__(/*! tracking/apis/dtm-api */ 21),
	__webpack_require__(/*! tracking/objects/event-object */ 22),
	__webpack_require__(/*! configurator/dpu-api */ 3)
], __WEBPACK_AMD_DEFINE_RESULT__ = function(EVENTS, DTM_API, EVENT_OBJ, DPU_API) {
	'use strict';
	var __ = {},
		exports = {
			__: __
		};
	/**
	 * add events
	 * @returns {void}
	 */
	__.addEvents = function() {
		__.eventBus.on(EVENTS.CONFIG_SAVED, __.handleConfigSaved);
		__.eventBus.on(EVENTS.CONFIG_START, __.handleConfigStart);
		__.eventBus.on(EVENTS.DSH_ZOOM_CHANGE, __.handleDshEvent);
		__.eventBus.on(EVENTS.DSH_INPUT, __.handleDshEvent);
	};
	/**
	 * handle config start event
	 * @param {String} startType - the config start type
	 * @return {void}
	 */
	__.handleConfigStart = function(startType) {
		var configId;
		if (startType === 'configuration-change' || startType === 'user-configuration') {
			configId = DPU_API.getConfigurationId();
			EVENT_OBJ.getData({}, 'config_start', '', 'car', {
				'configurationID' : configId,
				'configurationStartType' : EVENT_OBJ.getTrackingConfigurationStartType(startType),
				'source': EVENT_OBJ.getTrackingSource(startType)}).
				then(DTM_API.sendData).
				catch(function(err) {
					console.log("conversion tracking error (config start): " + err);
				});
		}
	};
	/**
	 * handle config save Event
	 * @param {String} audicode - audicode of the saved config
	 * @returns {void}
	 */
	__.handleConfigSaved = function(audicode) {
		EVENT_OBJ.getData({}, 'config_save', '', 'car', {'audicode':audicode, 'target': 'carstore'}).
		then(DTM_API.sendData).
		catch(function(err) {
			console.log("conversion tracking error (config save): " + err);
		});
	};
	/**
	 * handle dsh event
	 * @return {void}
	 */
	__.handleDshEvent = function() {
		var type = (this.event === EVENTS.DSH_ZOOM_CHANGE)? 'mapScroll' : 'textEntry';
		EVENT_OBJ.getData({}, 'dealer_search', '', 'dealer', {'source':type}).
		then(DTM_API.sendData).
		catch(function(err) {
			console.log("conversion tracking error (handleDshEvent): " + err);
		});
	};
	/**
	 * public initialize method
	 * @param {EventBus} globalEventBus - tbd
	 * @return {Promise} returns Promise
	 */
	exports.initializePromise = function(globalEventBus) {
		return new Promise(function(resolve) {
			__.eventBus = globalEventBus;
			__.addEvents();
			resolve('tracking/events/conversion-tracking.js');
		});
	};
	return exports;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ })

},[234]);
});
//# sourceMappingURL=bundle.tracking.js.map